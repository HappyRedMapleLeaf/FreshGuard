
ECE198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  080054c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080054c8  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d942  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e18  00000000  00000000  0002da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0002f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a75  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182b9  00000000  00000000  0003100d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2ef  00000000  00000000  000492c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab6c  00000000  00000000  000585b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041d0  00000000  00000000  000f3124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f72f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053c0 	.word	0x080053c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080053c0 	.word	0x080053c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b970 	b.w	8000e24 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d965      	bls.n	8000c3e <__udivmoddi4+0xe2>
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	b143      	cbz	r3, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	f1c3 0220 	rsb	r2, r3, #32
 8000b80:	409f      	lsls	r7, r3
 8000b82:	fa20 f202 	lsr.w	r2, r0, r2
 8000b86:	4317      	orrs	r7, r2
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b8e:	fa1f f58c 	uxth.w	r5, ip
 8000b92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	fb01 f005 	mul.w	r0, r1, r5
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000ba8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb0:	f080 811c 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f240 8119 	bls.w	8000dec <__udivmoddi4+0x290>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bce:	fb00 f505 	mul.w	r5, r0, r5
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x90>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x294>
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x294>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11e      	cbz	r6, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40dc      	lsrs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0xbc>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80ed 	beq.w	8000de6 <__udivmoddi4+0x28a>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d149      	bne.n	8000cb4 <__udivmoddi4+0x158>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d302      	bcc.n	8000c2a <__udivmoddi4+0xce>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	f200 80f8 	bhi.w	8000e1a <__udivmoddi4+0x2be>
 8000c2a:	1a84      	subs	r4, r0, r2
 8000c2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c30:	2001      	movs	r0, #1
 8000c32:	4617      	mov	r7, r2
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e2      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	e9c6 4700 	strd	r4, r7, [r6]
 8000c3c:	e7df      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c3e:	b902      	cbnz	r2, 8000c42 <__udivmoddi4+0xe6>
 8000c40:	deff      	udf	#255	; 0xff
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8090 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c60:	0c22      	lsrs	r2, r4, #16
 8000c62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c66:	fb0e f005 	mul.w	r0, lr, r5
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2b8>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c88:	fb07 2210 	mls	r2, r7, r0, r2
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x14e>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x14c>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2c2>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb2:	e79f      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000cb4:	f1c1 0720 	rsb	r7, r1, #32
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cca:	40fd      	lsrs	r5, r7
 8000ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	fb09 5518 	mls	r5, r9, r8, r5
 8000cde:	0c1c      	lsrs	r4, r3, #16
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	fa02 f201 	lsl.w	r2, r2, r1
 8000cee:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2b4>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2b4>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4464      	add	r4, ip
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	b29d      	uxth	r5, r3
 8000d10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d14:	fb09 4413 	mls	r4, r9, r3, r4
 8000d18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2ac>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2ac>
 8000d32:	3b02      	subs	r3, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	42ac      	cmp	r4, r5
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46ae      	mov	lr, r5
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x29c>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x298>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x208>
 8000d4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d52:	eb64 040e 	sbc.w	r4, r4, lr
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	e9c6 7400 	strd	r7, r4, [r6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	f1c3 0120 	rsb	r1, r3, #32
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	fa20 f201 	lsr.w	r2, r0, r1
 8000d78:	fa25 f101 	lsr.w	r1, r5, r1
 8000d7c:	409d      	lsls	r5, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d96:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x258>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1b49      	subs	r1, r1, r5
 8000db6:	b292      	uxth	r2, r2
 8000db8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x282>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0xfc>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000dec:	4639      	mov	r1, r7
 8000dee:	e6e6      	b.n	8000bbe <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x90>
 8000df4:	4548      	cmp	r0, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e04:	4645      	mov	r5, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x282>
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x258>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e14:	3d02      	subs	r5, #2
 8000e16:	4462      	add	r2, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e70a      	b.n	8000c34 <__udivmoddi4+0xd8>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x14e>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d013      	beq.n	8000e68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00b      	beq.n	8000e68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e50:	e000      	b.n	8000e54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <readFSR>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// the below 3 functions modified from https://controllerstech.com/stm32-adc-multi-channel-without-dma/
int readFSR() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e92:	2302      	movs	r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <readFSR+0x54>)
 8000e9c:	f001 f928 	bl	80020f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <readFSR+0x54>)
 8000ea2:	f000 ffa5 	bl	8001df0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8000ea6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <readFSR+0x54>)
 8000eac:	f001 f887 	bl	8001fbe <HAL_ADC_PollForConversion>
	int ret = HAL_ADC_GetValue(&hadc1);
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <readFSR+0x54>)
 8000eb2:	f001 f90f 	bl	80020d4 <HAL_ADC_GetValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <readFSR+0x54>)
 8000ebc:	f001 f84c 	bl	8001f58 <HAL_ADC_Stop>
	return ret;
 8000ec0:	697b      	ldr	r3, [r7, #20]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000084 	.word	0x20000084

08000ed0 <readTMP>:

int readTMP() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000eea:	2304      	movs	r3, #4
 8000eec:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <readTMP+0x54>)
 8000ef4:	f001 f8fc 	bl	80020f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <readTMP+0x54>)
 8000efa:	f000 ff79 	bl	8001df0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8000efe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <readTMP+0x54>)
 8000f04:	f001 f85b 	bl	8001fbe <HAL_ADC_PollForConversion>
	int ret = HAL_ADC_GetValue(&hadc1);
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <readTMP+0x54>)
 8000f0a:	f001 f8e3 	bl	80020d4 <HAL_ADC_GetValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <readTMP+0x54>)
 8000f14:	f001 f820 	bl	8001f58 <HAL_ADC_Stop>
	return ret;
 8000f18:	697b      	ldr	r3, [r7, #20]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000084 	.word	0x20000084

08000f28 <readLIGHT>:

int readLIGHT() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f42:	2306      	movs	r3, #6
 8000f44:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <readLIGHT+0x54>)
 8000f4c:	f001 f8d0 	bl	80020f0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <readLIGHT+0x54>)
 8000f52:	f000 ff4d 	bl	8001df0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8000f56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <readLIGHT+0x54>)
 8000f5c:	f001 f82f 	bl	8001fbe <HAL_ADC_PollForConversion>
	int ret = HAL_ADC_GetValue(&hadc1);
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <readLIGHT+0x54>)
 8000f62:	f001 f8b7 	bl	80020d4 <HAL_ADC_GetValue>
 8000f66:	4603      	mov	r3, r0
 8000f68:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <readLIGHT+0x54>)
 8000f6c:	f000 fff4 	bl	8001f58 <HAL_ADC_Stop>
	return ret;
 8000f70:	697b      	ldr	r3, [r7, #20]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000084 	.word	0x20000084

08000f80 <turn_on_buzzer>:

void turn_on_buzzer(int freq, bool *buzzer_on) {
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	if (!(*buzzer_on)) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02d      	beq.n	8000ff4 <turn_on_buzzer+0x74>
		const int CLOCK_FREQ = 84000000;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <turn_on_buzzer+0x80>)
 8000f9a:	617b      	str	r3, [r7, #20]
		__HAL_TIM_SET_AUTORELOAD(&htim2, CLOCK_FREQ / freq);
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <turn_on_buzzer+0x84>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <turn_on_buzzer+0x84>)
 8000fb6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, CLOCK_FREQ / freq / 2);
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc0:	0fda      	lsrs	r2, r3, #31
 8000fc2:	4413      	add	r3, r2
 8000fc4:	105b      	asrs	r3, r3, #1
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <turn_on_buzzer+0x84>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <turn_on_buzzer+0x84>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
		int eee = __HAL_TIM_GET_COUNTER(&htim2);
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <turn_on_buzzer+0x84>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	613b      	str	r3, [r7, #16]
		int eeee = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <turn_on_buzzer+0x84>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	60fb      	str	r3, [r7, #12]
		int eeeee = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <turn_on_buzzer+0x84>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	60bb      	str	r3, [r7, #8]
		(*buzzer_on) = true;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	0501bd00 	.word	0x0501bd00
 8001004:	200000cc 	.word	0x200000cc

08001008 <turn_off_buzzer>:

void turn_off_buzzer(bool *buzzer_on) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if (*buzzer_on) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d011      	beq.n	800103c <turn_off_buzzer+0x34>
		__HAL_TIM_SET_AUTORELOAD(&htim2, 1);
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <turn_off_buzzer+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <turn_off_buzzer+0x40>)
 8001022:	2201      	movs	r2, #1
 8001024:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <turn_off_buzzer+0x40>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <turn_off_buzzer+0x40>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
		(*buzzer_on) = false;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
	}
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200000cc 	.word	0x200000cc
 800104c:	00000000 	.word	0x00000000

08001050 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b0aa      	sub	sp, #168	; 0xa8
 8001054:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001056:	f000 fe15 	bl	8001c84 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800105a:	f000 f9bf 	bl	80013dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800105e:	f000 fb3b 	bl	80016d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001062:	f000 fb0f 	bl	8001684 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001066:	f000 fa25 	bl	80014b4 <MX_ADC1_Init>
	MX_TIM2_Init();
 800106a:	f000 fa95 	bl	8001598 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	489a      	ldr	r0, [pc, #616]	; (80012dc <main+0x28c>)
 8001072:	f002 fa37 	bl	80034e4 <HAL_TIM_PWM_Start>
	int cnt = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t prevTick = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t prevDebugTick = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	int m_sum_TMP = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	int m_sum_LIGHT = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int m_sum_FSR = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	int m_avg_TMP = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int m_avg_LIGHT = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int m_avg_FSR = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	67fb      	str	r3, [r7, #124]	; 0x7c

	const int m_avg_cnt = 5; // number of values to keep track of for moving average
 80010aa:	2305      	movs	r3, #5
 80010ac:	66bb      	str	r3, [r7, #104]	; 0x68

	int val_TMP[5] = { 0 };
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
	int val_LIGHT[5] = { 0 };
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
	int val_FSR[5] = { 0 };
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

	bool prev_fridge_is_open = false;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	bool is_alarming = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	bool buzzer_on = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	70fb      	strb	r3, [r7, #3]

	uint32_t buzzer_countdown_ms = 0; // how long until buzzer turns off
 80010ec:	2300      	movs	r3, #0
 80010ee:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t buzzer_start_time = 0;   // tick when buzzer turned on
 80010f0:	2300      	movs	r3, #0
 80010f2:	673b      	str	r3, [r7, #112]	; 0x70

	uint32_t C3_start_time = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t C3_countdown = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t prev_alarm = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	// prev_alarm is the time at which the alarm previously rang

	double timescale = 760;
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <main+0x290>)
 8001106:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint32_t tick = HAL_GetTick();
 800110a:	f000 fe21 	bl	8001d50 <HAL_GetTick>
 800110e:	64f8      	str	r0, [r7, #76]	; 0x4c

		if (tick - prevTick > 100) {
 8001110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001112:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	f240 8122 	bls.w	8001362 <main+0x312>
			prevTick = tick;
 800111e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

			// Calculating moving averages
			cnt++;
 8001124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001128:	3301      	adds	r3, #1
 800112a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			cnt %= m_avg_cnt;
 800112e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001132:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001134:	fb93 f2f2 	sdiv	r2, r3, r2
 8001138:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			int reading = readFSR();
 8001144:	f7ff fe98 	bl	8000e78 <readFSR>
 8001148:	64b8      	str	r0, [r7, #72]	; 0x48
			m_sum_FSR += reading - val_FSR[cnt];
 800114a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	33a0      	adds	r3, #160	; 0xa0
 8001152:	443b      	add	r3, r7
 8001154:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001160:	4413      	add	r3, r2
 8001162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			val_FSR[cnt] = reading;
 8001166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	33a0      	adds	r3, #160	; 0xa0
 800116e:	443b      	add	r3, r7
 8001170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001172:	f843 2c9c 	str.w	r2, [r3, #-156]
			m_avg_FSR = m_sum_FSR / m_avg_cnt;
 8001176:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800117a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800117c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001180:	67fb      	str	r3, [r7, #124]	; 0x7c

			reading = readTMP();
 8001182:	f7ff fea5 	bl	8000ed0 <readTMP>
 8001186:	64b8      	str	r0, [r7, #72]	; 0x48
			m_sum_TMP += reading - val_TMP[cnt];
 8001188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	33a0      	adds	r3, #160	; 0xa0
 8001190:	443b      	add	r3, r7
 8001192:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800119e:	4413      	add	r3, r2
 80011a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			val_TMP[cnt] = reading;
 80011a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	33a0      	adds	r3, #160	; 0xa0
 80011ac:	443b      	add	r3, r7
 80011ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b0:	f843 2c74 	str.w	r2, [r3, #-116]
			m_avg_TMP = m_sum_TMP / m_avg_cnt;
 80011b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80011b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80011be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			reading = readLIGHT();
 80011c2:	f7ff feb1 	bl	8000f28 <readLIGHT>
 80011c6:	64b8      	str	r0, [r7, #72]	; 0x48
			m_sum_LIGHT += reading - val_LIGHT[cnt];
 80011c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	33a0      	adds	r3, #160	; 0xa0
 80011d0:	443b      	add	r3, r7
 80011d2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80011d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011de:	4413      	add	r3, r2
 80011e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			val_LIGHT[cnt] = reading;
 80011e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	33a0      	adds	r3, #160	; 0xa0
 80011ec:	443b      	add	r3, r7
 80011ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011f0:	f843 2c88 	str.w	r2, [r3, #-136]
			m_avg_LIGHT = m_sum_LIGHT / m_avg_cnt;
 80011f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80011fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			// detecting opening of fridge
			bool fridge_is_open = m_avg_LIGHT > 300;
 8001202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001206:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			bool fridge_just_opened = fridge_is_open && !prev_fridge_is_open;
 8001214:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <main+0x1de>
 800121c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <main+0x1de>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <main+0x1e0>
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			bool fridge_just_closed = !fridge_is_open && prev_fridge_is_open;
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <main+0x20a>
 800124e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <main+0x20a>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <main+0x20c>
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001260:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			prev_fridge_is_open = fridge_is_open;
 800126c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001270:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			// alarming when fridge is opened
			if (fridge_just_opened) {
 8001274:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001278:	2b00      	cmp	r3, #0
 800127a:	d014      	beq.n	80012a6 <main+0x256>
				// turn on warning LEDs
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <main+0x294>)
 8001284:	f001 fbd4 	bl	8002a30 <HAL_GPIO_WritePin>

				// ring buzzer
				if (is_alarming) {
 8001288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <main+0x256>
					turn_on_buzzer(440, &buzzer_on);
 8001290:	1cfb      	adds	r3, r7, #3
 8001292:	4619      	mov	r1, r3
 8001294:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8001298:	f7ff fe72 	bl	8000f80 <turn_on_buzzer>
					buzzer_countdown_ms = 500;
 800129c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
					buzzer_start_time = tick;
 80012a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a4:	673b      	str	r3, [r7, #112]	; 0x70
				}
			}

			if (fridge_just_closed) {
 80012a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <main+0x26a>
				// turn all LEDs off
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <main+0x294>)
 80012b6:	f001 fbbb 	bl	8002a30 <HAL_GPIO_WritePin>
			}

			// Warning when temperature too low
			if (m_avg_TMP < 751 && fridge_is_open) {
 80012ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012c2:	4293      	cmp	r3, r2
 80012c4:	dc10      	bgt.n	80012e8 <main+0x298>
 80012c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <main+0x298>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <main+0x294>)
 80012d6:	f001 fbab 	bl	8002a30 <HAL_GPIO_WritePin>
 80012da:	e00b      	b.n	80012f4 <main+0x2a4>
 80012dc:	200000cc 	.word	0x200000cc
 80012e0:	4087c000 	.word	0x4087c000
 80012e4:	40020000 	.word	0x40020000
			} else {
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ee:	4838      	ldr	r0, [pc, #224]	; (80013d0 <main+0x380>)
 80012f0:	f001 fb9e 	bl	8002a30 <HAL_GPIO_WritePin>
			}

			// once per hour alarm
			if (is_alarming && tick - prev_alarm > 3600000 / timescale) { // ring once per hour
 80012f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d025      	beq.n	8001348 <main+0x2f8>
 80012fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8fe 	bl	8000504 <__aeabi_ui2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001310:	a12d      	add	r1, pc, #180	; (adr r1, 80013c8 <main+0x378>)
 8001312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001316:	f7ff fa99 	bl	800084c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7ff fbf9 	bl	8000b18 <__aeabi_dcmpgt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <main+0x2f8>
				turn_on_buzzer(523, &buzzer_on);
 800132c:	1cfb      	adds	r3, r7, #3
 800132e:	4619      	mov	r1, r3
 8001330:	f240 200b 	movw	r0, #523	; 0x20b
 8001334:	f7ff fe24 	bl	8000f80 <turn_on_buzzer>
				buzzer_countdown_ms = 500;
 8001338:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
				buzzer_start_time = tick;
 800133e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001340:	673b      	str	r3, [r7, #112]	; 0x70
				prev_alarm = HAL_GetTick();
 8001342:	f000 fd05 	bl	8001d50 <HAL_GetTick>
 8001346:	66f8      	str	r0, [r7, #108]	; 0x6c
			}

			// turning off the timer
			if (tick - buzzer_start_time > buzzer_countdown_ms && buzzer_on) {
 8001348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800134a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001350:	429a      	cmp	r2, r3
 8001352:	d206      	bcs.n	8001362 <main+0x312>
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <main+0x312>
				turn_off_buzzer(&buzzer_on);
 800135a:	1cfb      	adds	r3, r7, #3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe53 	bl	8001008 <turn_off_buzzer>
			}
		}

		if (tick - prevDebugTick > 500) {
 8001362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800136e:	f67f aecc 	bls.w	800110a <main+0xba>
			prevDebugTick = tick;
 8001372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			bool B2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <main+0x380>)
 800137c:	f001 fb40 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			bool B3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <main+0x384>)
 8001392:	f001 fb35 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			printf("FSR: %d TMP: %d LIGHT: %d B2: %d B3: %d\n", m_avg_FSR,
 80013a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013a8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <main+0x388>)
 80013bc:	f003 f98a 	bl	80046d4 <iprintf>
	while (1) {
 80013c0:	e6a3      	b.n	800110a <main+0xba>
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	414b7740 	.word	0x414b7740
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020800 	.word	0x40020800
 80013d8:	080053d8 	.word	0x080053d8

080013dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 f9c7 	bl	800477e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <SystemClock_Config+0xd0>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <SystemClock_Config+0xd0>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <SystemClock_Config+0xd4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <SystemClock_Config+0xd4>)
 800142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <SystemClock_Config+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2310      	movs	r3, #16
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2300      	movs	r3, #0
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001450:	2310      	movs	r3, #16
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001454:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800145a:	2304      	movs	r3, #4
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800145e:	2307      	movs	r3, #7
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fafc 	bl	8002a64 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9a>
		Error_Handler();
 8001472:	f000 f9eb 	bl	800184c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fd5e 	bl	8002f54 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xc6>
		Error_Handler();
 800149e:	f000 f9d5 	bl	800184c <Error_Handler>
	}
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <MX_ADC1_Init+0xd8>)
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <MX_ADC1_Init+0xdc>)
 80014ca:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <MX_ADC1_Init+0xd8>)
 80014ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <MX_ADC1_Init+0xd8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_ADC1_Init+0xd8>)
 80014dc:	2201      	movs	r2, #1
 80014de:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <MX_ADC1_Init+0xd8>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_ADC1_Init+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_ADC1_Init+0xd8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_ADC1_Init+0xd8>)
 80014f6:	4a27      	ldr	r2, [pc, #156]	; (8001594 <MX_ADC1_Init+0xe0>)
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_ADC1_Init+0xd8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_ADC1_Init+0xd8>)
 8001502:	2203      	movs	r2, #3
 8001504:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC1_Init+0xd8>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC1_Init+0xd8>)
 8001510:	2201      	movs	r2, #1
 8001512:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001514:	481d      	ldr	r0, [pc, #116]	; (800158c <MX_ADC1_Init+0xd8>)
 8001516:	f000 fc27 	bl	8001d68 <HAL_ADC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001520:	f000 f994 	bl	800184c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001528:	2301      	movs	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_ADC1_Init+0xd8>)
 8001536:	f000 fddb 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001540:	f000 f984 	bl	800184c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001544:	2304      	movs	r3, #4
 8001546:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001548:	2302      	movs	r3, #2
 800154a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800154c:	2304      	movs	r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_ADC1_Init+0xd8>)
 8001556:	f000 fdcb 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0xb0>
		Error_Handler();
 8001560:	f000 f974 	bl	800184c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001564:	2308      	movs	r3, #8
 8001566:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001568:	2303      	movs	r3, #3
 800156a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800156c:	2306      	movs	r3, #6
 800156e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_ADC1_Init+0xd8>)
 8001576:	f000 fdbb 	bl	80020f0 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0xd0>
		Error_Handler();
 8001580:	f000 f964 	bl	800184c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000084 	.word	0x20000084
 8001590:	40012000 	.word	0x40012000
 8001594:	0f000001 	.word	0x0f000001

08001598 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <MX_TIM2_Init+0xe4>)
 80015ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MX_TIM2_Init+0xe4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <MX_TIM2_Init+0xe4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 700000;
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <MX_TIM2_Init+0xe4>)
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <MX_TIM2_Init+0xe8>)
 80015e0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <MX_TIM2_Init+0xe4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <MX_TIM2_Init+0xe4>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80015ee:	4823      	ldr	r0, [pc, #140]	; (800167c <MX_TIM2_Init+0xe4>)
 80015f0:	f001 fed0 	bl	8003394 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x66>
		Error_Handler();
 80015fa:	f000 f927 	bl	800184c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001608:	4619      	mov	r1, r3
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <MX_TIM2_Init+0xe4>)
 800160c:	f002 f8dc 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x82>
		Error_Handler();
 8001616:	f000 f919 	bl	800184c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_TIM2_Init+0xe4>)
 800161c:	f001 ff09 	bl	8003432 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x92>
		Error_Handler();
 8001626:	f000 f911 	bl	800184c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4619      	mov	r1, r3
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <MX_TIM2_Init+0xe4>)
 800163a:	f002 fc59 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001644:	f000 f902 	bl	800184c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM2_Init+0xe4>)
 8001660:	f001 fff0 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800166a:	f000 f8ef 	bl	800184c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM2_Init+0xe4>)
 8001670:	f000 f99a 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	; 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200000cc 	.word	0x200000cc
 8001680:	000aae60 	.word	0x000aae60

08001684 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f002 fc86 	bl	8003fcc <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80016c6:	f000 f8c1 	bl	800184c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000114 	.word	0x20000114
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <MX_GPIO_Init+0x12c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a43      	ldr	r2, [pc, #268]	; (8001804 <MX_GPIO_Init+0x12c>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <MX_GPIO_Init+0x12c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <MX_GPIO_Init+0x12c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a35      	ldr	r2, [pc, #212]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <MX_GPIO_Init+0x12c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED3_Pin | LED1_Pin | LED0_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8001764:	4828      	ldr	r0, [pc, #160]	; (8001808 <MX_GPIO_Init+0x130>)
 8001766:	f001 f963 	bl	8002a30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <MX_GPIO_Init+0x134>)
 8001770:	f001 f95e 	bl	8002a30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4821      	ldr	r0, [pc, #132]	; (8001810 <MX_GPIO_Init+0x138>)
 800178c:	f000 ffb4 	bl	80026f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B2_Pin */
	GPIO_InitStruct.Pin = B2_Pin;
 8001790:	2340      	movs	r3, #64	; 0x40
 8001792:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4819      	ldr	r0, [pc, #100]	; (8001808 <MX_GPIO_Init+0x130>)
 80017a4:	f000 ffa8 	bl	80026f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LED1_Pin LED0_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LED1_Pin | LED0_Pin;
 80017a8:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80017ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_GPIO_Init+0x130>)
 80017c2:	f000 ff99 	bl	80026f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_GPIO_Init+0x138>)
 80017da:	f000 ff8d 	bl	80026f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 80017de:	2340      	movs	r3, #64	; 0x40
 80017e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_GPIO_Init+0x134>)
 80017f6:	f000 ff7f 	bl	80026f8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800

08001814 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fafa 	bl	8000e28 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
	}
	return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001896:	2007      	movs	r0, #7
 8001898:	f000 fefa 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_ADC_MspInit+0xb0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d141      	bne.n	800194e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_ADC_MspInit+0xb4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_ADC_MspInit+0xb4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_ADC_MspInit+0xb4>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_ADC_MspInit+0xb4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FSR_Pin|TMP_Pin;
 800191e:	2311      	movs	r3, #17
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <HAL_ADC_MspInit+0xb8>)
 8001932:	f000 fee1 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHT_Pin;
 8001936:	2301      	movs	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHT_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_ADC_MspInit+0xbc>)
 800194a:	f000 fed5 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012000 	.word	0x40012000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d10d      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_TIM_Base_MspInit+0x3c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d11d      	bne.n	8001a06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_MspPostInit+0x68>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_TIM_MspPostInit+0x68>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_TIM_MspPostInit+0x68>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80019e6:	2320      	movs	r3, #32
 80019e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <HAL_TIM_MspPostInit+0x6c>)
 8001a02:	f000 fe79 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_UART_MspInit+0x84>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12b      	bne.n	8001a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a72:	230c      	movs	r3, #12
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a82:	2307      	movs	r3, #7
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_UART_MspInit+0x8c>)
 8001a8e:	f000 fe33 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f918 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
  }

  return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_isatty>:

int _isatty(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f002 fe24 	bl	800481c <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20018000 	.word	0x20018000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000158 	.word	0x20000158
 8001c08:	200002b0 	.word	0x200002b0

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c4c:	4c0b      	ldr	r4, [pc, #44]	; (8001c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c5a:	f7ff ffd7 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f002 fde3 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff f9f5 	bl	8001050 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c74:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8001c78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c7c:	200002ac 	.word	0x200002ac

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fcef 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fdce 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fcf9 	bl	80026de <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fccf 	bl	80026a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	2000015c 	.word	0x2000015c

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000015c 	.word	0x2000015c

08001d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e033      	b.n	8001de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fd8e 	bl	80018a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dae:	f023 0302 	bic.w	r3, r3, #2
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 faba 	bl	8002334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd6:	e001      	b.n	8001ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Start+0x1a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e097      	b.n	8001f3a <HAL_ADC_Start+0x14a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d018      	beq.n	8001e52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e30:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <HAL_ADC_Start+0x158>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a45      	ldr	r2, [pc, #276]	; (8001f4c <HAL_ADC_Start+0x15c>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9a      	lsrs	r2, r3, #18
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d15f      	bne.n	8001f20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9e:	d106      	bne.n	8001eae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	f023 0206 	bic.w	r2, r3, #6
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_ADC_Start+0x160>)
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d129      	bne.n	8001f38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e020      	b.n	8001f38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_ADC_Start+0x164>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d11b      	bne.n	8001f38 <HAL_ADC_Start+0x148>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d114      	bne.n	8001f38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	e00b      	b.n	8001f38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0210 	orr.w	r2, r3, #16
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	40012300 	.word	0x40012300
 8001f54:	40012000 	.word	0x40012000

08001f58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Stop+0x16>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e021      	b.n	8001fb2 <HAL_ADC_Stop+0x5a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d113      	bne.n	8002004 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e063      	b.n	80020cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002004:	f7ff fea4 	bl	8001d50 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800200a:	e021      	b.n	8002050 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d01d      	beq.n	8002050 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_ADC_PollForConversion+0x6c>
 800201a:	f7ff fe99 	bl	8001d50 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d212      	bcs.n	8002050 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d00b      	beq.n	8002050 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d1d6      	bne.n	800200c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0212 	mvn.w	r2, #18
 8002066:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d123      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d11f      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d111      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e105      	b.n	8002318 <HAL_ADC_ConfigChannel+0x228>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d925      	bls.n	8002168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	4603      	mov	r3, r0
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	3b1e      	subs	r3, #30
 800215c:	409a      	lsls	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e022      	b.n	80021ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4403      	add	r3, r0
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d824      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
 80021fe:	e04c      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d824      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b23      	subs	r3, #35	; 0x23
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
 8002250:	e023      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	221f      	movs	r2, #31
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4618      	mov	r0, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	; 0x41
 800228e:	fa00 f203 	lsl.w	r2, r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_ADC_ConfigChannel+0x234>)
 800229c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_ADC_ConfigChannel+0x238>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1cc>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d105      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_ADC_ConfigChannel+0x238>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d123      	bne.n	800230e <HAL_ADC_ConfigChannel+0x21e>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x1e6>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d11b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d111      	bne.n	800230e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_ADC_ConfigChannel+0x23c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_ADC_ConfigChannel+0x240>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9a      	lsrs	r2, r3, #18
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40012300 	.word	0x40012300
 8002328:	40012000 	.word	0x40012000
 800232c:	20000000 	.word	0x20000000
 8002330:	431bde83 	.word	0x431bde83

08002334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233c:	4b79      	ldr	r3, [pc, #484]	; (8002524 <ADC_Init+0x1f0>)
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	431a      	orrs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	021a      	lsls	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800238c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	4a58      	ldr	r2, [pc, #352]	; (8002528 <ADC_Init+0x1f4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	e00f      	b.n	8002432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0202 	bic.w	r2, r2, #2
 8002440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7e1b      	ldrb	r3, [r3, #24]
 800244c:	005a      	lsls	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800247e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	3b01      	subs	r3, #1
 800248c:	035a      	lsls	r2, r3, #13
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e007      	b.n	80024a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	051a      	lsls	r2, r3, #20
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ea:	025a      	lsls	r2, r3, #9
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	029a      	lsls	r2, r3, #10
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40012300 	.word	0x40012300
 8002528:	0f000001 	.word	0x0f000001

0800252c <__NVIC_SetPriorityGrouping>:
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_SetPriority>:
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <SysTick_Config>:
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff8e 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff47 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff5c 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff8e 	bl	80025e4 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5d 	bl	8002590 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffb0 	bl	800264c <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e159      	b.n	80029c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8148 	bne.w	80029c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d005      	beq.n	800274a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	2b02      	cmp	r3, #2
 8002748:	d130      	bne.n	80027ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0201 	and.w	r2, r3, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d017      	beq.n	80027e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d123      	bne.n	800283c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a2 	beq.w	80029c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289a:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_GPIO_Init+0x2ec>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_GPIO_Init+0x2f0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x202>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_GPIO_Init+0x2f4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x1fe>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a47      	ldr	r2, [pc, #284]	; (80029f0 <HAL_GPIO_Init+0x2f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a46      	ldr	r2, [pc, #280]	; (80029f4 <HAL_GPIO_Init+0x2fc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x1f6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <HAL_GPIO_Init+0x300>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x1f2>
 80028e6:	2304      	movs	r3, #4
 80028e8:	e008      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e004      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028fa:	2300      	movs	r3, #0
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	f002 0203 	and.w	r2, r2, #3
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	4093      	lsls	r3, r2
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290c:	4935      	ldr	r1, [pc, #212]	; (80029e4 <HAL_GPIO_Init+0x2ec>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_GPIO_Init+0x304>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_GPIO_Init+0x304>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_GPIO_Init+0x304>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029bc:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <HAL_GPIO_Init+0x304>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	f67f aea2 	bls.w	8002714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40020000 	.word	0x40020000
 80029ec:	40020400 	.word	0x40020400
 80029f0:	40020800 	.word	0x40020800
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e001      	b.n	8002a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e267      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d075      	beq.n	8002b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	4b88      	ldr	r3, [pc, #544]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8e:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d112      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9a:	4b82      	ldr	r3, [pc, #520]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	4b7e      	ldr	r3, [pc, #504]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05b      	beq.n	8002b6c <HAL_RCC_OscConfig+0x108>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d157      	bne.n	8002b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e242      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x74>
 8002aca:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a75      	ldr	r2, [pc, #468]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xb0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x98>
 8002ae2:	4b70      	ldr	r3, [pc, #448]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6c      	ldr	r2, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xb0>
 8002afc:	4b69      	ldr	r3, [pc, #420]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a65      	ldr	r2, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7ff f918 	bl	8001d50 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b24:	f7ff f914 	bl	8001d50 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e207      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xc0>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff f904 	bl	8001d50 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7ff f900 	bl	8001d50 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1f3      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0xe8>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b92:	4b44      	ldr	r3, [pc, #272]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x152>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1c7      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4937      	ldr	r1, [pc, #220]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e03a      	b.n	8002c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <HAL_RCC_OscConfig+0x244>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7ff f8b9 	bl	8001d50 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be2:	f7ff f8b5 	bl	8001d50 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e1a8      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4925      	ldr	r1, [pc, #148]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_OscConfig+0x244>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7ff f898 	bl	8001d50 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c24:	f7ff f894 	bl	8001d50 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e187      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_RCC_OscConfig+0x248>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7ff f878 	bl	8001d50 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c64:	f7ff f874 	bl	8001d50 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e167      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x240>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x200>
 8002c82:	e01b      	b.n	8002cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_OscConfig+0x248>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7ff f861 	bl	8001d50 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	e00e      	b.n	8002cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c92:	f7ff f85d 	bl	8001d50 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d907      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e150      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	42470000 	.word	0x42470000
 8002cac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ea      	bne.n	8002c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8097 	beq.w	8002df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a7c      	ldr	r2, [pc, #496]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b77      	ldr	r3, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x474>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d06:	4b74      	ldr	r3, [pc, #464]	; (8002ed8 <HAL_RCC_OscConfig+0x474>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a73      	ldr	r2, [pc, #460]	; (8002ed8 <HAL_RCC_OscConfig+0x474>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7ff f81d 	bl	8001d50 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7ff f819 	bl	8001d50 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e10c      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x474>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x2ea>
 8002d40:	4b64      	ldr	r3, [pc, #400]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a63      	ldr	r2, [pc, #396]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0x324>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x30c>
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a5b      	ldr	r2, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0x324>
 8002d70:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a54      	ldr	r2, [pc, #336]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f023 0304 	bic.w	r3, r3, #4
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe ffde 	bl	8001d50 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe ffda 	bl	8001d50 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0cb      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0ee      	beq.n	8002d98 <HAL_RCC_OscConfig+0x334>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe ffc8 	bl	8001d50 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe ffc4 	bl	8001d50 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0b5      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dda:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ee      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a1 	beq.w	8002f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d05c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d141      	bne.n	8002e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x478>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe ff98 	bl	8001d50 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe ff94 	bl	8001d50 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e087      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x478>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe ff6d 	bl	8001d50 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe ff69 	bl	8001d50 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e05c      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x416>
 8002e98:	e054      	b.n	8002f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCC_OscConfig+0x478>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe ff56 	bl	8001d50 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe ff52 	bl	8001d50 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e045      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x444>
 8002ec6:	e03d      	b.n	8002f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e038      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x4ec>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d028      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d121      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d11a      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f10:	4013      	ands	r3, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d111      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cc      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b68      	ldr	r3, [pc, #416]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d90c      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b8      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	494d      	ldr	r1, [pc, #308]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d044      	beq.n	8003074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d119      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d003      	beq.n	8003012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300e:	2b03      	cmp	r3, #3
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e06f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e067      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4934      	ldr	r1, [pc, #208]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7fe fe84 	bl	8001d50 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe fe80 	bl	8001d50 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e04f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d20c      	bcs.n	800309c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e032      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4916      	ldr	r1, [pc, #88]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	490e      	ldr	r1, [pc, #56]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030da:	f000 f821 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	490a      	ldr	r1, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fde4 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023c00 	.word	0x40023c00
 8003110:	40023800 	.word	0x40023800
 8003114:	08005404 	.word	0x08005404
 8003118:	20000000 	.word	0x20000000
 800311c:	20000004 	.word	0x20000004

08003120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b094      	sub	sp, #80	; 0x50
 8003126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
 800312c:	2300      	movs	r3, #0
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	2300      	movs	r3, #0
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003138:	4b79      	ldr	r3, [pc, #484]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d00d      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x40>
 8003144:	2b08      	cmp	r3, #8
 8003146:	f200 80e1 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x1ec>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x34>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x3a>
 8003152:	e0db      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_GetSysClockFreq+0x204>)
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003158:	e0db      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_GetSysClockFreq+0x208>)
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315e:	e0d8      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003160:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003180:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
 800318e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4621      	mov	r1, r4
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	6139      	str	r1, [r7, #16]
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c4:	4659      	mov	r1, fp
 80031c6:	018b      	lsls	r3, r1, #6
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ce:	4651      	mov	r1, sl
 80031d0:	018a      	lsls	r2, r1, #6
 80031d2:	4651      	mov	r1, sl
 80031d4:	ebb2 0801 	subs.w	r8, r2, r1
 80031d8:	4659      	mov	r1, fp
 80031da:	eb63 0901 	sbc.w	r9, r3, r1
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f2:	4690      	mov	r8, r2
 80031f4:	4699      	mov	r9, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	eb18 0303 	adds.w	r3, r8, r3
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	462b      	mov	r3, r5
 8003200:	eb49 0303 	adc.w	r3, r9, r3
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003212:	4629      	mov	r1, r5
 8003214:	024b      	lsls	r3, r1, #9
 8003216:	4621      	mov	r1, r4
 8003218:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800321c:	4621      	mov	r1, r4
 800321e:	024a      	lsls	r2, r1, #9
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
 800322a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800322c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003230:	f7fd fc7c 	bl	8000b2c <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	e058      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	2200      	movs	r2, #0
 8003246:	4618      	mov	r0, r3
 8003248:	4611      	mov	r1, r2
 800324a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	f04f 0000 	mov.w	r0, #0
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	0159      	lsls	r1, r3, #5
 8003266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326a:	0150      	lsls	r0, r2, #5
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4641      	mov	r1, r8
 8003272:	ebb2 0a01 	subs.w	sl, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb63 0b01 	sbc.w	fp, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003288:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800328c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003290:	ebb2 040a 	subs.w	r4, r2, sl
 8003294:	eb63 050b 	sbc.w	r5, r3, fp
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	00eb      	lsls	r3, r5, #3
 80032a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a6:	00e2      	lsls	r2, r4, #3
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	18e3      	adds	r3, r4, r3
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	464b      	mov	r3, r9
 80032b4:	eb45 0303 	adc.w	r3, r5, r3
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c6:	4629      	mov	r1, r5
 80032c8:	028b      	lsls	r3, r1, #10
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d0:	4621      	mov	r1, r4
 80032d2:	028a      	lsls	r2, r1, #10
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	2200      	movs	r2, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	61fa      	str	r2, [r7, #28]
 80032e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e4:	f7fd fc22 	bl	8000b2c <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x204>)
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003314:	4618      	mov	r0, r3
 8003316:	3750      	adds	r7, #80	; 0x50
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	08005414 	.word	0x08005414

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffdc 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0b5b      	lsrs	r3, r3, #13
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08005414 	.word	0x08005414

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fad4 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fac0 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e041      	b.n	80034c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f839 	bl	80034d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fa71 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_TIM_PWM_Start+0x24>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e022      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d109      	bne.n	8003522 <HAL_TIM_PWM_Start+0x3e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e015      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d109      	bne.n	800353c <HAL_TIM_PWM_Start+0x58>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e008      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e068      	b.n	8003628 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0x82>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	e013      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0x92>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	e00b      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003584:	e003      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fc84 	bl	8003ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_TIM_PWM_Start+0x14c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_TIM_PWM_Start+0x14c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d018      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x10e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d013      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x10e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_TIM_PWM_Start+0x150>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x10e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a17      	ldr	r2, [pc, #92]	; (8003638 <HAL_TIM_PWM_Start+0x154>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x10e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_TIM_PWM_Start+0x158>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x10e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_TIM_PWM_Start+0x15c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b06      	cmp	r3, #6
 8003602:	d010      	beq.n	8003626 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	e007      	b.n	8003626 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40014000 	.word	0x40014000

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ae      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	f200 809f 	bhi.w	80037b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080037b1 	.word	0x080037b1
 8003680:	080037b1 	.word	0x080037b1
 8003684:	080037b1 	.word	0x080037b1
 8003688:	080036ed 	.word	0x080036ed
 800368c:	080037b1 	.word	0x080037b1
 8003690:	080037b1 	.word	0x080037b1
 8003694:	080037b1 	.word	0x080037b1
 8003698:	0800372f 	.word	0x0800372f
 800369c:	080037b1 	.word	0x080037b1
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	080037b1 	.word	0x080037b1
 80036a8:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f9d0 	bl	8003a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
      break;
 80036ea:	e064      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa16 	bl	8003b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
      break;
 800372c:	e043      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa61 	bl	8003bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0208 	orr.w	r2, r2, #8
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
      break;
 800376c:	e023      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 faab 	bl	8003cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_ConfigClockSource+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0b4      	b.n	800394e <HAL_TIM_ConfigClockSource+0x186>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d03e      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xd4>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	f200 8087 	bhi.w	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	f000 8086 	beq.w	800393a <HAL_TIM_ConfigClockSource+0x172>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d87f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d01a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xa6>
 8003838:	2b70      	cmp	r3, #112	; 0x70
 800383a:	d87b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d050      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003840:	2b60      	cmp	r3, #96	; 0x60
 8003842:	d877      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003848:	2b50      	cmp	r3, #80	; 0x50
 800384a:	d873      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d058      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x13a>
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d86f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d064      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b30      	cmp	r3, #48	; 0x30
 800385a:	d86b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d060      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d867      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d05a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	e062      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f000 faf1 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e04f      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f000 fada 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e03c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa4e 	bl	8003d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	; 0x50
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 faa7 	bl	8003e2e <TIM_ITRx_SetConfig>
      break;
 80038e0:	e02c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 fa6d 	bl	8003dce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	; 0x60
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fa97 	bl	8003e2e <TIM_ITRx_SetConfig>
      break;
 8003900:	e01c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	461a      	mov	r2, r3
 8003910:	f000 fa2e 	bl	8003d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa87 	bl	8003e2e <TIM_ITRx_SetConfig>
      break;
 8003920:	e00c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fa7e 	bl	8003e2e <TIM_ITRx_SetConfig>
      break;
 8003932:	e003      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800393a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <TIM_Base_SetConfig+0xe4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0x38>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x38>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <TIM_Base_SetConfig+0xe8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x38>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <TIM_Base_SetConfig+0xec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x38>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0xf0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <TIM_Base_SetConfig+0xe4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01b      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d017      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <TIM_Base_SetConfig+0xe8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <TIM_Base_SetConfig+0xec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <TIM_Base_SetConfig+0xf0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <TIM_Base_SetConfig+0xf4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <TIM_Base_SetConfig+0xf8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <TIM_Base_SetConfig+0xfc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <TIM_Base_SetConfig+0xe4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d103      	bne.n	8003a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800

08003a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 0302 	bic.w	r3, r3, #2
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <TIM_OC1_SetConfig+0xc8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10c      	bne.n	8003ace <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0308 	bic.w	r3, r3, #8
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <TIM_OC1_SetConfig+0xc8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d111      	bne.n	8003afa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40010000 	.word	0x40010000

08003b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0320 	bic.w	r3, r3, #32
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <TIM_OC2_SetConfig+0xd4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10d      	bne.n	8003ba0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <TIM_OC2_SetConfig+0xd4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d113      	bne.n	8003bd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000

08003bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <TIM_OC3_SetConfig+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10d      	bne.n	8003c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <TIM_OC3_SetConfig+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d113      	bne.n	8003ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	621a      	str	r2, [r3, #32]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <TIM_OC4_SetConfig+0x9c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000

08003d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 030a 	bic.w	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0210 	bic.w	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	031b      	lsls	r3, r3, #12
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f043 0307 	orr.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e050      	b.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d013      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10c      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e03f      	b.n	800405e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fd10 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f829 	bl	8004068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b0c0      	sub	sp, #256	; 0x100
 800406e:	af00      	add	r7, sp, #0
 8004070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	68d9      	ldr	r1, [r3, #12]
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	ea40 0301 	orr.w	r3, r0, r1
 8004090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040c0:	f021 010c 	bic.w	r1, r1, #12
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ce:	430b      	orrs	r3, r1
 80040d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	6999      	ldr	r1, [r3, #24]
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	ea40 0301 	orr.w	r3, r0, r1
 80040ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <UART_SetConfig+0x2cc>)
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d005      	beq.n	8004108 <UART_SetConfig+0xa0>
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b8d      	ldr	r3, [pc, #564]	; (8004338 <UART_SetConfig+0x2d0>)
 8004104:	429a      	cmp	r2, r3
 8004106:	d104      	bne.n	8004112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7ff f930 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 800410c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004110:	e003      	b.n	800411a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004112:	f7ff f917 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8004116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004124:	f040 810c 	bne.w	8004340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	1891      	adds	r1, r2, r2
 8004140:	65b9      	str	r1, [r7, #88]	; 0x58
 8004142:	415b      	adcs	r3, r3
 8004144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800414a:	4621      	mov	r1, r4
 800414c:	eb12 0801 	adds.w	r8, r2, r1
 8004150:	4629      	mov	r1, r5
 8004152:	eb43 0901 	adc.w	r9, r3, r1
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800416a:	4690      	mov	r8, r2
 800416c:	4699      	mov	r9, r3
 800416e:	4623      	mov	r3, r4
 8004170:	eb18 0303 	adds.w	r3, r8, r3
 8004174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004178:	462b      	mov	r3, r5
 800417a:	eb49 0303 	adc.w	r3, r9, r3
 800417e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800418e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004196:	460b      	mov	r3, r1
 8004198:	18db      	adds	r3, r3, r3
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
 800419c:	4613      	mov	r3, r2
 800419e:	eb42 0303 	adc.w	r3, r2, r3
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
 80041a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041ac:	f7fc fcbe 	bl	8000b2c <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b61      	ldr	r3, [pc, #388]	; (800433c <UART_SetConfig+0x2d4>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	011c      	lsls	r4, r3, #4
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041d8:	415b      	adcs	r3, r3
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041e0:	4641      	mov	r1, r8
 80041e2:	eb12 0a01 	adds.w	sl, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb43 0b01 	adc.w	fp, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004200:	4692      	mov	sl, r2
 8004202:	469b      	mov	fp, r3
 8004204:	4643      	mov	r3, r8
 8004206:	eb1a 0303 	adds.w	r3, sl, r3
 800420a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800420e:	464b      	mov	r3, r9
 8004210:	eb4b 0303 	adc.w	r3, fp, r3
 8004214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800422c:	460b      	mov	r3, r1
 800422e:	18db      	adds	r3, r3, r3
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
 8004232:	4613      	mov	r3, r2
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800423e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004242:	f7fc fc73 	bl	8000b2c <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4611      	mov	r1, r2
 800424c:	4b3b      	ldr	r3, [pc, #236]	; (800433c <UART_SetConfig+0x2d4>)
 800424e:	fba3 2301 	umull	r2, r3, r3, r1
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2264      	movs	r2, #100	; 0x64
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	1acb      	subs	r3, r1, r3
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004262:	4b36      	ldr	r3, [pc, #216]	; (800433c <UART_SetConfig+0x2d4>)
 8004264:	fba3 2302 	umull	r2, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004270:	441c      	add	r4, r3
 8004272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800427c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	63b9      	str	r1, [r7, #56]	; 0x38
 800428c:	415b      	adcs	r3, r3
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6339      	str	r1, [r7, #48]	; 0x30
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c8:	464b      	mov	r3, r9
 80042ca:	460a      	mov	r2, r1
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042e8:	460b      	mov	r3, r1
 80042ea:	18db      	adds	r3, r3, r3
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ee:	4613      	mov	r3, r2
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042fe:	f7fc fc15 	bl	8000b2c <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <UART_SetConfig+0x2d4>)
 8004308:	fba3 1302 	umull	r1, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2164      	movs	r1, #100	; 0x64
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <UART_SetConfig+0x2d4>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 0207 	and.w	r2, r3, #7
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4422      	add	r2, r4
 800432e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004330:	e106      	b.n	8004540 <UART_SetConfig+0x4d8>
 8004332:	bf00      	nop
 8004334:	40011000 	.word	0x40011000
 8004338:	40011400 	.word	0x40011400
 800433c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800434a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800434e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004352:	4642      	mov	r2, r8
 8004354:	464b      	mov	r3, r9
 8004356:	1891      	adds	r1, r2, r2
 8004358:	6239      	str	r1, [r7, #32]
 800435a:	415b      	adcs	r3, r3
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004362:	4641      	mov	r1, r8
 8004364:	1854      	adds	r4, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb43 0501 	adc.w	r5, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	00eb      	lsls	r3, r5, #3
 8004376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4643      	mov	r3, r8
 8004382:	18e3      	adds	r3, r4, r3
 8004384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004388:	464b      	mov	r3, r9
 800438a:	eb45 0303 	adc.w	r3, r5, r3
 800438e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800439e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043ae:	4629      	mov	r1, r5
 80043b0:	008b      	lsls	r3, r1, #2
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b8:	4621      	mov	r1, r4
 80043ba:	008a      	lsls	r2, r1, #2
 80043bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043c0:	f7fc fbb4 	bl	8000b2c <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4b60      	ldr	r3, [pc, #384]	; (800454c <UART_SetConfig+0x4e4>)
 80043ca:	fba3 2302 	umull	r2, r3, r3, r2
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	011c      	lsls	r4, r3, #4
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	61b9      	str	r1, [r7, #24]
 80043ec:	415b      	adcs	r3, r3
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f4:	4641      	mov	r1, r8
 80043f6:	1851      	adds	r1, r2, r1
 80043f8:	6139      	str	r1, [r7, #16]
 80043fa:	4649      	mov	r1, r9
 80043fc:	414b      	adcs	r3, r1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800440c:	4659      	mov	r1, fp
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4651      	mov	r1, sl
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4642      	mov	r2, r8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004428:	464b      	mov	r3, r9
 800442a:	460a      	mov	r2, r1
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	67bb      	str	r3, [r7, #120]	; 0x78
 800443e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800444c:	4649      	mov	r1, r9
 800444e:	008b      	lsls	r3, r1, #2
 8004450:	4641      	mov	r1, r8
 8004452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004456:	4641      	mov	r1, r8
 8004458:	008a      	lsls	r2, r1, #2
 800445a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800445e:	f7fc fb65 	bl	8000b2c <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4611      	mov	r1, r2
 8004468:	4b38      	ldr	r3, [pc, #224]	; (800454c <UART_SetConfig+0x4e4>)
 800446a:	fba3 2301 	umull	r2, r3, r3, r1
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2264      	movs	r2, #100	; 0x64
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	1acb      	subs	r3, r1, r3
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	3332      	adds	r3, #50	; 0x32
 800447c:	4a33      	ldr	r2, [pc, #204]	; (800454c <UART_SetConfig+0x4e4>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004488:	441c      	add	r4, r3
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448e:	2200      	movs	r2, #0
 8004490:	673b      	str	r3, [r7, #112]	; 0x70
 8004492:	677a      	str	r2, [r7, #116]	; 0x74
 8004494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	1891      	adds	r1, r2, r2
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	415b      	adcs	r3, r3
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a8:	4641      	mov	r1, r8
 80044aa:	1851      	adds	r1, r2, r1
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	4649      	mov	r1, r9
 80044b0:	414b      	adcs	r3, r1
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044c0:	4659      	mov	r1, fp
 80044c2:	00cb      	lsls	r3, r1, #3
 80044c4:	4651      	mov	r1, sl
 80044c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ca:	4651      	mov	r1, sl
 80044cc:	00ca      	lsls	r2, r1, #3
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	4642      	mov	r2, r8
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044da:	464b      	mov	r3, r9
 80044dc:	460a      	mov	r2, r1
 80044de:	eb42 0303 	adc.w	r3, r2, r3
 80044e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	663b      	str	r3, [r7, #96]	; 0x60
 80044ee:	667a      	str	r2, [r7, #100]	; 0x64
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044fc:	4649      	mov	r1, r9
 80044fe:	008b      	lsls	r3, r1, #2
 8004500:	4641      	mov	r1, r8
 8004502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004506:	4641      	mov	r1, r8
 8004508:	008a      	lsls	r2, r1, #2
 800450a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800450e:	f7fc fb0d 	bl	8000b2c <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <UART_SetConfig+0x4e4>)
 8004518:	fba3 1302 	umull	r1, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	2164      	movs	r1, #100	; 0x64
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	3332      	adds	r3, #50	; 0x32
 800452a:	4a08      	ldr	r2, [pc, #32]	; (800454c <UART_SetConfig+0x4e4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4422      	add	r2, r4
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	bf00      	nop
 8004542:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004546:	46bd      	mov	sp, r7
 8004548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454c:	51eb851f 	.word	0x51eb851f

08004550 <std>:
 8004550:	2300      	movs	r3, #0
 8004552:	b510      	push	{r4, lr}
 8004554:	4604      	mov	r4, r0
 8004556:	e9c0 3300 	strd	r3, r3, [r0]
 800455a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800455e:	6083      	str	r3, [r0, #8]
 8004560:	8181      	strh	r1, [r0, #12]
 8004562:	6643      	str	r3, [r0, #100]	; 0x64
 8004564:	81c2      	strh	r2, [r0, #14]
 8004566:	6183      	str	r3, [r0, #24]
 8004568:	4619      	mov	r1, r3
 800456a:	2208      	movs	r2, #8
 800456c:	305c      	adds	r0, #92	; 0x5c
 800456e:	f000 f906 	bl	800477e <memset>
 8004572:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <std+0x58>)
 8004574:	6263      	str	r3, [r4, #36]	; 0x24
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <std+0x5c>)
 8004578:	62a3      	str	r3, [r4, #40]	; 0x28
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <std+0x60>)
 800457c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <std+0x64>)
 8004580:	6323      	str	r3, [r4, #48]	; 0x30
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <std+0x68>)
 8004584:	6224      	str	r4, [r4, #32]
 8004586:	429c      	cmp	r4, r3
 8004588:	d006      	beq.n	8004598 <std+0x48>
 800458a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800458e:	4294      	cmp	r4, r2
 8004590:	d002      	beq.n	8004598 <std+0x48>
 8004592:	33d0      	adds	r3, #208	; 0xd0
 8004594:	429c      	cmp	r4, r3
 8004596:	d105      	bne.n	80045a4 <std+0x54>
 8004598:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a0:	f000 b966 	b.w	8004870 <__retarget_lock_init_recursive>
 80045a4:	bd10      	pop	{r4, pc}
 80045a6:	bf00      	nop
 80045a8:	080046f9 	.word	0x080046f9
 80045ac:	0800471b 	.word	0x0800471b
 80045b0:	08004753 	.word	0x08004753
 80045b4:	08004777 	.word	0x08004777
 80045b8:	20000160 	.word	0x20000160

080045bc <stdio_exit_handler>:
 80045bc:	4a02      	ldr	r2, [pc, #8]	; (80045c8 <stdio_exit_handler+0xc>)
 80045be:	4903      	ldr	r1, [pc, #12]	; (80045cc <stdio_exit_handler+0x10>)
 80045c0:	4803      	ldr	r0, [pc, #12]	; (80045d0 <stdio_exit_handler+0x14>)
 80045c2:	f000 b869 	b.w	8004698 <_fwalk_sglue>
 80045c6:	bf00      	nop
 80045c8:	2000000c 	.word	0x2000000c
 80045cc:	0800511d 	.word	0x0800511d
 80045d0:	20000018 	.word	0x20000018

080045d4 <cleanup_stdio>:
 80045d4:	6841      	ldr	r1, [r0, #4]
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <cleanup_stdio+0x34>)
 80045d8:	4299      	cmp	r1, r3
 80045da:	b510      	push	{r4, lr}
 80045dc:	4604      	mov	r4, r0
 80045de:	d001      	beq.n	80045e4 <cleanup_stdio+0x10>
 80045e0:	f000 fd9c 	bl	800511c <_fflush_r>
 80045e4:	68a1      	ldr	r1, [r4, #8]
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <cleanup_stdio+0x38>)
 80045e8:	4299      	cmp	r1, r3
 80045ea:	d002      	beq.n	80045f2 <cleanup_stdio+0x1e>
 80045ec:	4620      	mov	r0, r4
 80045ee:	f000 fd95 	bl	800511c <_fflush_r>
 80045f2:	68e1      	ldr	r1, [r4, #12]
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <cleanup_stdio+0x3c>)
 80045f6:	4299      	cmp	r1, r3
 80045f8:	d004      	beq.n	8004604 <cleanup_stdio+0x30>
 80045fa:	4620      	mov	r0, r4
 80045fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004600:	f000 bd8c 	b.w	800511c <_fflush_r>
 8004604:	bd10      	pop	{r4, pc}
 8004606:	bf00      	nop
 8004608:	20000160 	.word	0x20000160
 800460c:	200001c8 	.word	0x200001c8
 8004610:	20000230 	.word	0x20000230

08004614 <global_stdio_init.part.0>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <global_stdio_init.part.0+0x30>)
 8004618:	4c0b      	ldr	r4, [pc, #44]	; (8004648 <global_stdio_init.part.0+0x34>)
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <global_stdio_init.part.0+0x38>)
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	4620      	mov	r0, r4
 8004620:	2200      	movs	r2, #0
 8004622:	2104      	movs	r1, #4
 8004624:	f7ff ff94 	bl	8004550 <std>
 8004628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800462c:	2201      	movs	r2, #1
 800462e:	2109      	movs	r1, #9
 8004630:	f7ff ff8e 	bl	8004550 <std>
 8004634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004638:	2202      	movs	r2, #2
 800463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463e:	2112      	movs	r1, #18
 8004640:	f7ff bf86 	b.w	8004550 <std>
 8004644:	20000298 	.word	0x20000298
 8004648:	20000160 	.word	0x20000160
 800464c:	080045bd 	.word	0x080045bd

08004650 <__sfp_lock_acquire>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__sfp_lock_acquire+0x8>)
 8004652:	f000 b90e 	b.w	8004872 <__retarget_lock_acquire_recursive>
 8004656:	bf00      	nop
 8004658:	200002a1 	.word	0x200002a1

0800465c <__sfp_lock_release>:
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <__sfp_lock_release+0x8>)
 800465e:	f000 b909 	b.w	8004874 <__retarget_lock_release_recursive>
 8004662:	bf00      	nop
 8004664:	200002a1 	.word	0x200002a1

08004668 <__sinit>:
 8004668:	b510      	push	{r4, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	f7ff fff0 	bl	8004650 <__sfp_lock_acquire>
 8004670:	6a23      	ldr	r3, [r4, #32]
 8004672:	b11b      	cbz	r3, 800467c <__sinit+0x14>
 8004674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004678:	f7ff bff0 	b.w	800465c <__sfp_lock_release>
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <__sinit+0x28>)
 800467e:	6223      	str	r3, [r4, #32]
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <__sinit+0x2c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f5      	bne.n	8004674 <__sinit+0xc>
 8004688:	f7ff ffc4 	bl	8004614 <global_stdio_init.part.0>
 800468c:	e7f2      	b.n	8004674 <__sinit+0xc>
 800468e:	bf00      	nop
 8004690:	080045d5 	.word	0x080045d5
 8004694:	20000298 	.word	0x20000298

08004698 <_fwalk_sglue>:
 8004698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800469c:	4607      	mov	r7, r0
 800469e:	4688      	mov	r8, r1
 80046a0:	4614      	mov	r4, r2
 80046a2:	2600      	movs	r6, #0
 80046a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046a8:	f1b9 0901 	subs.w	r9, r9, #1
 80046ac:	d505      	bpl.n	80046ba <_fwalk_sglue+0x22>
 80046ae:	6824      	ldr	r4, [r4, #0]
 80046b0:	2c00      	cmp	r4, #0
 80046b2:	d1f7      	bne.n	80046a4 <_fwalk_sglue+0xc>
 80046b4:	4630      	mov	r0, r6
 80046b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d907      	bls.n	80046d0 <_fwalk_sglue+0x38>
 80046c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d003      	beq.n	80046d0 <_fwalk_sglue+0x38>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	4306      	orrs	r6, r0
 80046d0:	3568      	adds	r5, #104	; 0x68
 80046d2:	e7e9      	b.n	80046a8 <_fwalk_sglue+0x10>

080046d4 <iprintf>:
 80046d4:	b40f      	push	{r0, r1, r2, r3}
 80046d6:	b507      	push	{r0, r1, r2, lr}
 80046d8:	4906      	ldr	r1, [pc, #24]	; (80046f4 <iprintf+0x20>)
 80046da:	ab04      	add	r3, sp, #16
 80046dc:	6808      	ldr	r0, [r1, #0]
 80046de:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e2:	6881      	ldr	r1, [r0, #8]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	f000 f9e9 	bl	8004abc <_vfiprintf_r>
 80046ea:	b003      	add	sp, #12
 80046ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f0:	b004      	add	sp, #16
 80046f2:	4770      	bx	lr
 80046f4:	20000064 	.word	0x20000064

080046f8 <__sread>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f868 	bl	80047d4 <_read_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	bfab      	itete	ge
 8004708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470a:	89a3      	ldrhlt	r3, [r4, #12]
 800470c:	181b      	addge	r3, r3, r0
 800470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004712:	bfac      	ite	ge
 8004714:	6563      	strge	r3, [r4, #84]	; 0x54
 8004716:	81a3      	strhlt	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__swrite>:
 800471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	461f      	mov	r7, r3
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	4605      	mov	r5, r0
 8004726:	460c      	mov	r4, r1
 8004728:	4616      	mov	r6, r2
 800472a:	d505      	bpl.n	8004738 <__swrite+0x1e>
 800472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004730:	2302      	movs	r3, #2
 8004732:	2200      	movs	r2, #0
 8004734:	f000 f83c 	bl	80047b0 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	4632      	mov	r2, r6
 8004746:	463b      	mov	r3, r7
 8004748:	4628      	mov	r0, r5
 800474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	f000 b853 	b.w	80047f8 <_write_r>

08004752 <__sseek>:
 8004752:	b510      	push	{r4, lr}
 8004754:	460c      	mov	r4, r1
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 f829 	bl	80047b0 <_lseek_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	bf15      	itete	ne
 8004764:	6560      	strne	r0, [r4, #84]	; 0x54
 8004766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476e:	81a3      	strheq	r3, [r4, #12]
 8004770:	bf18      	it	ne
 8004772:	81a3      	strhne	r3, [r4, #12]
 8004774:	bd10      	pop	{r4, pc}

08004776 <__sclose>:
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 b809 	b.w	8004790 <_close_r>

0800477e <memset>:
 800477e:	4402      	add	r2, r0
 8004780:	4603      	mov	r3, r0
 8004782:	4293      	cmp	r3, r2
 8004784:	d100      	bne.n	8004788 <memset+0xa>
 8004786:	4770      	bx	lr
 8004788:	f803 1b01 	strb.w	r1, [r3], #1
 800478c:	e7f9      	b.n	8004782 <memset+0x4>
	...

08004790 <_close_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d06      	ldr	r5, [pc, #24]	; (80047ac <_close_r+0x1c>)
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	f7fd f9cb 	bl	8001b36 <_close>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_close_r+0x1a>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_close_r+0x1a>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	2000029c 	.word	0x2000029c

080047b0 <_lseek_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d07      	ldr	r5, [pc, #28]	; (80047d0 <_lseek_r+0x20>)
 80047b4:	4604      	mov	r4, r0
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	602a      	str	r2, [r5, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7fd f9e0 	bl	8001b84 <_lseek>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_lseek_r+0x1e>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_lseek_r+0x1e>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	2000029c 	.word	0x2000029c

080047d4 <_read_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d07      	ldr	r5, [pc, #28]	; (80047f4 <_read_r+0x20>)
 80047d8:	4604      	mov	r4, r0
 80047da:	4608      	mov	r0, r1
 80047dc:	4611      	mov	r1, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	602a      	str	r2, [r5, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f7fd f98a 	bl	8001afc <_read>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_read_r+0x1e>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_read_r+0x1e>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	2000029c 	.word	0x2000029c

080047f8 <_write_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4d07      	ldr	r5, [pc, #28]	; (8004818 <_write_r+0x20>)
 80047fc:	4604      	mov	r4, r0
 80047fe:	4608      	mov	r0, r1
 8004800:	4611      	mov	r1, r2
 8004802:	2200      	movs	r2, #0
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f7fd f804 	bl	8001814 <_write>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_write_r+0x1e>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_write_r+0x1e>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	2000029c 	.word	0x2000029c

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000064 	.word	0x20000064

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f000 fdc0 	bl	80053c0 <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	08005458 	.word	0x08005458
 8004864:	08005458 	.word	0x08005458
 8004868:	08005458 	.word	0x08005458
 800486c:	0800545c 	.word	0x0800545c

08004870 <__retarget_lock_init_recursive>:
 8004870:	4770      	bx	lr

08004872 <__retarget_lock_acquire_recursive>:
 8004872:	4770      	bx	lr

08004874 <__retarget_lock_release_recursive>:
 8004874:	4770      	bx	lr
	...

08004878 <_free_r>:
 8004878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800487a:	2900      	cmp	r1, #0
 800487c:	d044      	beq.n	8004908 <_free_r+0x90>
 800487e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004882:	9001      	str	r0, [sp, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f1a1 0404 	sub.w	r4, r1, #4
 800488a:	bfb8      	it	lt
 800488c:	18e4      	addlt	r4, r4, r3
 800488e:	f000 f8df 	bl	8004a50 <__malloc_lock>
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <_free_r+0x94>)
 8004894:	9801      	ldr	r0, [sp, #4]
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	b933      	cbnz	r3, 80048a8 <_free_r+0x30>
 800489a:	6063      	str	r3, [r4, #4]
 800489c:	6014      	str	r4, [r2, #0]
 800489e:	b003      	add	sp, #12
 80048a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a4:	f000 b8da 	b.w	8004a5c <__malloc_unlock>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d908      	bls.n	80048be <_free_r+0x46>
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1961      	adds	r1, r4, r5
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf01      	itttt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	1949      	addeq	r1, r1, r5
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	e7ed      	b.n	800489a <_free_r+0x22>
 80048be:	461a      	mov	r2, r3
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b10b      	cbz	r3, 80048c8 <_free_r+0x50>
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d9fa      	bls.n	80048be <_free_r+0x46>
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	1855      	adds	r5, r2, r1
 80048cc:	42a5      	cmp	r5, r4
 80048ce:	d10b      	bne.n	80048e8 <_free_r+0x70>
 80048d0:	6824      	ldr	r4, [r4, #0]
 80048d2:	4421      	add	r1, r4
 80048d4:	1854      	adds	r4, r2, r1
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	d1e0      	bne.n	800489e <_free_r+0x26>
 80048dc:	681c      	ldr	r4, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6053      	str	r3, [r2, #4]
 80048e2:	440c      	add	r4, r1
 80048e4:	6014      	str	r4, [r2, #0]
 80048e6:	e7da      	b.n	800489e <_free_r+0x26>
 80048e8:	d902      	bls.n	80048f0 <_free_r+0x78>
 80048ea:	230c      	movs	r3, #12
 80048ec:	6003      	str	r3, [r0, #0]
 80048ee:	e7d6      	b.n	800489e <_free_r+0x26>
 80048f0:	6825      	ldr	r5, [r4, #0]
 80048f2:	1961      	adds	r1, r4, r5
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf04      	itt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	bf04      	itt	eq
 8004900:	1949      	addeq	r1, r1, r5
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	6054      	str	r4, [r2, #4]
 8004906:	e7ca      	b.n	800489e <_free_r+0x26>
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
 800490c:	200002a4 	.word	0x200002a4

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0e      	ldr	r6, [pc, #56]	; (800494c <sbrk_aligned+0x3c>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 fcbc 	bl	8005298 <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fcb7 	bl	8005298 <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d00a      	beq.n	8004944 <sbrk_aligned+0x34>
 800492e:	1cc4      	adds	r4, r0, #3
 8004930:	f024 0403 	bic.w	r4, r4, #3
 8004934:	42a0      	cmp	r0, r4
 8004936:	d007      	beq.n	8004948 <sbrk_aligned+0x38>
 8004938:	1a21      	subs	r1, r4, r0
 800493a:	4628      	mov	r0, r5
 800493c:	f000 fcac 	bl	8005298 <_sbrk_r>
 8004940:	3001      	adds	r0, #1
 8004942:	d101      	bne.n	8004948 <sbrk_aligned+0x38>
 8004944:	f04f 34ff 	mov.w	r4, #4294967295
 8004948:	4620      	mov	r0, r4
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	200002a8 	.word	0x200002a8

08004950 <_malloc_r>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	1ccd      	adds	r5, r1, #3
 8004956:	f025 0503 	bic.w	r5, r5, #3
 800495a:	3508      	adds	r5, #8
 800495c:	2d0c      	cmp	r5, #12
 800495e:	bf38      	it	cc
 8004960:	250c      	movcc	r5, #12
 8004962:	2d00      	cmp	r5, #0
 8004964:	4607      	mov	r7, r0
 8004966:	db01      	blt.n	800496c <_malloc_r+0x1c>
 8004968:	42a9      	cmp	r1, r5
 800496a:	d905      	bls.n	8004978 <_malloc_r+0x28>
 800496c:	230c      	movs	r3, #12
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	2600      	movs	r6, #0
 8004972:	4630      	mov	r0, r6
 8004974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004978:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a4c <_malloc_r+0xfc>
 800497c:	f000 f868 	bl	8004a50 <__malloc_lock>
 8004980:	f8d8 3000 	ldr.w	r3, [r8]
 8004984:	461c      	mov	r4, r3
 8004986:	bb5c      	cbnz	r4, 80049e0 <_malloc_r+0x90>
 8004988:	4629      	mov	r1, r5
 800498a:	4638      	mov	r0, r7
 800498c:	f7ff ffc0 	bl	8004910 <sbrk_aligned>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	4604      	mov	r4, r0
 8004994:	d155      	bne.n	8004a42 <_malloc_r+0xf2>
 8004996:	f8d8 4000 	ldr.w	r4, [r8]
 800499a:	4626      	mov	r6, r4
 800499c:	2e00      	cmp	r6, #0
 800499e:	d145      	bne.n	8004a2c <_malloc_r+0xdc>
 80049a0:	2c00      	cmp	r4, #0
 80049a2:	d048      	beq.n	8004a36 <_malloc_r+0xe6>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	4631      	mov	r1, r6
 80049a8:	4638      	mov	r0, r7
 80049aa:	eb04 0903 	add.w	r9, r4, r3
 80049ae:	f000 fc73 	bl	8005298 <_sbrk_r>
 80049b2:	4581      	cmp	r9, r0
 80049b4:	d13f      	bne.n	8004a36 <_malloc_r+0xe6>
 80049b6:	6821      	ldr	r1, [r4, #0]
 80049b8:	1a6d      	subs	r5, r5, r1
 80049ba:	4629      	mov	r1, r5
 80049bc:	4638      	mov	r0, r7
 80049be:	f7ff ffa7 	bl	8004910 <sbrk_aligned>
 80049c2:	3001      	adds	r0, #1
 80049c4:	d037      	beq.n	8004a36 <_malloc_r+0xe6>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	442b      	add	r3, r5
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	f8d8 3000 	ldr.w	r3, [r8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d038      	beq.n	8004a46 <_malloc_r+0xf6>
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	42a2      	cmp	r2, r4
 80049d8:	d12b      	bne.n	8004a32 <_malloc_r+0xe2>
 80049da:	2200      	movs	r2, #0
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	e00f      	b.n	8004a00 <_malloc_r+0xb0>
 80049e0:	6822      	ldr	r2, [r4, #0]
 80049e2:	1b52      	subs	r2, r2, r5
 80049e4:	d41f      	bmi.n	8004a26 <_malloc_r+0xd6>
 80049e6:	2a0b      	cmp	r2, #11
 80049e8:	d917      	bls.n	8004a1a <_malloc_r+0xca>
 80049ea:	1961      	adds	r1, r4, r5
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	6025      	str	r5, [r4, #0]
 80049f0:	bf18      	it	ne
 80049f2:	6059      	strne	r1, [r3, #4]
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	bf08      	it	eq
 80049f8:	f8c8 1000 	streq.w	r1, [r8]
 80049fc:	5162      	str	r2, [r4, r5]
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	4638      	mov	r0, r7
 8004a02:	f104 060b 	add.w	r6, r4, #11
 8004a06:	f000 f829 	bl	8004a5c <__malloc_unlock>
 8004a0a:	f026 0607 	bic.w	r6, r6, #7
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	1af2      	subs	r2, r6, r3
 8004a12:	d0ae      	beq.n	8004972 <_malloc_r+0x22>
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	50a3      	str	r3, [r4, r2]
 8004a18:	e7ab      	b.n	8004972 <_malloc_r+0x22>
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	6862      	ldr	r2, [r4, #4]
 8004a1e:	d1dd      	bne.n	80049dc <_malloc_r+0x8c>
 8004a20:	f8c8 2000 	str.w	r2, [r8]
 8004a24:	e7ec      	b.n	8004a00 <_malloc_r+0xb0>
 8004a26:	4623      	mov	r3, r4
 8004a28:	6864      	ldr	r4, [r4, #4]
 8004a2a:	e7ac      	b.n	8004986 <_malloc_r+0x36>
 8004a2c:	4634      	mov	r4, r6
 8004a2e:	6876      	ldr	r6, [r6, #4]
 8004a30:	e7b4      	b.n	800499c <_malloc_r+0x4c>
 8004a32:	4613      	mov	r3, r2
 8004a34:	e7cc      	b.n	80049d0 <_malloc_r+0x80>
 8004a36:	230c      	movs	r3, #12
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f000 f80e 	bl	8004a5c <__malloc_unlock>
 8004a40:	e797      	b.n	8004972 <_malloc_r+0x22>
 8004a42:	6025      	str	r5, [r4, #0]
 8004a44:	e7dc      	b.n	8004a00 <_malloc_r+0xb0>
 8004a46:	605b      	str	r3, [r3, #4]
 8004a48:	deff      	udf	#255	; 0xff
 8004a4a:	bf00      	nop
 8004a4c:	200002a4 	.word	0x200002a4

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_lock+0x8>)
 8004a52:	f7ff bf0e 	b.w	8004872 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	200002a0 	.word	0x200002a0

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f7ff bf09 	b.w	8004874 <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	200002a0 	.word	0x200002a0

08004a68 <__sfputc_r>:
 8004a68:	6893      	ldr	r3, [r2, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	b410      	push	{r4}
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	da08      	bge.n	8004a86 <__sfputc_r+0x1e>
 8004a74:	6994      	ldr	r4, [r2, #24]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	db01      	blt.n	8004a7e <__sfputc_r+0x16>
 8004a7a:	290a      	cmp	r1, #10
 8004a7c:	d103      	bne.n	8004a86 <__sfputc_r+0x1e>
 8004a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a82:	f000 bb73 	b.w	800516c <__swbuf_r>
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	1c58      	adds	r0, r3, #1
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	7019      	strb	r1, [r3, #0]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <__sfputs_r>:
 8004a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a98:	4606      	mov	r6, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	18d5      	adds	r5, r2, r3
 8004aa0:	42ac      	cmp	r4, r5
 8004aa2:	d101      	bne.n	8004aa8 <__sfputs_r+0x12>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e007      	b.n	8004ab8 <__sfputs_r+0x22>
 8004aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aac:	463a      	mov	r2, r7
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffda 	bl	8004a68 <__sfputc_r>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d1f3      	bne.n	8004aa0 <__sfputs_r+0xa>
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004abc <_vfiprintf_r>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	b09d      	sub	sp, #116	; 0x74
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4698      	mov	r8, r3
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_vfiprintf_r+0x18>
 8004acc:	6a03      	ldr	r3, [r0, #32]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x18>
 8004ad0:	f7ff fdca 	bl	8004668 <__sinit>
 8004ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad6:	07d9      	lsls	r1, r3, #31
 8004ad8:	d405      	bmi.n	8004ae6 <_vfiprintf_r+0x2a>
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d402      	bmi.n	8004ae6 <_vfiprintf_r+0x2a>
 8004ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae2:	f7ff fec6 	bl	8004872 <__retarget_lock_acquire_recursive>
 8004ae6:	89ab      	ldrh	r3, [r5, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	d501      	bpl.n	8004af0 <_vfiprintf_r+0x34>
 8004aec:	692b      	ldr	r3, [r5, #16]
 8004aee:	b99b      	cbnz	r3, 8004b18 <_vfiprintf_r+0x5c>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4630      	mov	r0, r6
 8004af4:	f000 fb78 	bl	80051e8 <__swsetup_r>
 8004af8:	b170      	cbz	r0, 8004b18 <_vfiprintf_r+0x5c>
 8004afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004afc:	07dc      	lsls	r4, r3, #31
 8004afe:	d504      	bpl.n	8004b0a <_vfiprintf_r+0x4e>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	b01d      	add	sp, #116	; 0x74
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	0598      	lsls	r0, r3, #22
 8004b0e:	d4f7      	bmi.n	8004b00 <_vfiprintf_r+0x44>
 8004b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b12:	f7ff feaf 	bl	8004874 <__retarget_lock_release_recursive>
 8004b16:	e7f3      	b.n	8004b00 <_vfiprintf_r+0x44>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b26:	2330      	movs	r3, #48	; 0x30
 8004b28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004cdc <_vfiprintf_r+0x220>
 8004b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b30:	f04f 0901 	mov.w	r9, #1
 8004b34:	4623      	mov	r3, r4
 8004b36:	469a      	mov	sl, r3
 8004b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b3c:	b10a      	cbz	r2, 8004b42 <_vfiprintf_r+0x86>
 8004b3e:	2a25      	cmp	r2, #37	; 0x25
 8004b40:	d1f9      	bne.n	8004b36 <_vfiprintf_r+0x7a>
 8004b42:	ebba 0b04 	subs.w	fp, sl, r4
 8004b46:	d00b      	beq.n	8004b60 <_vfiprintf_r+0xa4>
 8004b48:	465b      	mov	r3, fp
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f7ff ffa1 	bl	8004a96 <__sfputs_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	f000 80a9 	beq.w	8004cac <_vfiprintf_r+0x1f0>
 8004b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b5c:	445a      	add	r2, fp
 8004b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b60:	f89a 3000 	ldrb.w	r3, [sl]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80a1 	beq.w	8004cac <_vfiprintf_r+0x1f0>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b74:	f10a 0a01 	add.w	sl, sl, #1
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	9307      	str	r3, [sp, #28]
 8004b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b80:	931a      	str	r3, [sp, #104]	; 0x68
 8004b82:	4654      	mov	r4, sl
 8004b84:	2205      	movs	r2, #5
 8004b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8a:	4854      	ldr	r0, [pc, #336]	; (8004cdc <_vfiprintf_r+0x220>)
 8004b8c:	f7fb fb28 	bl	80001e0 <memchr>
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	b9d8      	cbnz	r0, 8004bcc <_vfiprintf_r+0x110>
 8004b94:	06d1      	lsls	r1, r2, #27
 8004b96:	bf44      	itt	mi
 8004b98:	2320      	movmi	r3, #32
 8004b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b9e:	0713      	lsls	r3, r2, #28
 8004ba0:	bf44      	itt	mi
 8004ba2:	232b      	movmi	r3, #43	; 0x2b
 8004ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bac:	2b2a      	cmp	r3, #42	; 0x2a
 8004bae:	d015      	beq.n	8004bdc <_vfiprintf_r+0x120>
 8004bb0:	9a07      	ldr	r2, [sp, #28]
 8004bb2:	4654      	mov	r4, sl
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f04f 0c0a 	mov.w	ip, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bc0:	3b30      	subs	r3, #48	; 0x30
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	d94d      	bls.n	8004c62 <_vfiprintf_r+0x1a6>
 8004bc6:	b1b0      	cbz	r0, 8004bf6 <_vfiprintf_r+0x13a>
 8004bc8:	9207      	str	r2, [sp, #28]
 8004bca:	e014      	b.n	8004bf6 <_vfiprintf_r+0x13a>
 8004bcc:	eba0 0308 	sub.w	r3, r0, r8
 8004bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	46a2      	mov	sl, r4
 8004bda:	e7d2      	b.n	8004b82 <_vfiprintf_r+0xc6>
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	1d19      	adds	r1, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	9103      	str	r1, [sp, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bfbb      	ittet	lt
 8004be8:	425b      	neglt	r3, r3
 8004bea:	f042 0202 	orrlt.w	r2, r2, #2
 8004bee:	9307      	strge	r3, [sp, #28]
 8004bf0:	9307      	strlt	r3, [sp, #28]
 8004bf2:	bfb8      	it	lt
 8004bf4:	9204      	strlt	r2, [sp, #16]
 8004bf6:	7823      	ldrb	r3, [r4, #0]
 8004bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bfa:	d10c      	bne.n	8004c16 <_vfiprintf_r+0x15a>
 8004bfc:	7863      	ldrb	r3, [r4, #1]
 8004bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004c00:	d134      	bne.n	8004c6c <_vfiprintf_r+0x1b0>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	9203      	str	r2, [sp, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfb8      	it	lt
 8004c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c12:	3402      	adds	r4, #2
 8004c14:	9305      	str	r3, [sp, #20]
 8004c16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004cec <_vfiprintf_r+0x230>
 8004c1a:	7821      	ldrb	r1, [r4, #0]
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f7fb fade 	bl	80001e0 <memchr>
 8004c24:	b138      	cbz	r0, 8004c36 <_vfiprintf_r+0x17a>
 8004c26:	9b04      	ldr	r3, [sp, #16]
 8004c28:	eba0 000a 	sub.w	r0, r0, sl
 8004c2c:	2240      	movs	r2, #64	; 0x40
 8004c2e:	4082      	lsls	r2, r0
 8004c30:	4313      	orrs	r3, r2
 8004c32:	3401      	adds	r4, #1
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c3a:	4829      	ldr	r0, [pc, #164]	; (8004ce0 <_vfiprintf_r+0x224>)
 8004c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c40:	2206      	movs	r2, #6
 8004c42:	f7fb facd 	bl	80001e0 <memchr>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d03f      	beq.n	8004cca <_vfiprintf_r+0x20e>
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <_vfiprintf_r+0x228>)
 8004c4c:	bb1b      	cbnz	r3, 8004c96 <_vfiprintf_r+0x1da>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	3307      	adds	r3, #7
 8004c52:	f023 0307 	bic.w	r3, r3, #7
 8004c56:	3308      	adds	r3, #8
 8004c58:	9303      	str	r3, [sp, #12]
 8004c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5c:	443b      	add	r3, r7
 8004c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c60:	e768      	b.n	8004b34 <_vfiprintf_r+0x78>
 8004c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c66:	460c      	mov	r4, r1
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e7a6      	b.n	8004bba <_vfiprintf_r+0xfe>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	3401      	adds	r4, #1
 8004c70:	9305      	str	r3, [sp, #20]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f04f 0c0a 	mov.w	ip, #10
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c7e:	3a30      	subs	r2, #48	; 0x30
 8004c80:	2a09      	cmp	r2, #9
 8004c82:	d903      	bls.n	8004c8c <_vfiprintf_r+0x1d0>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0c6      	beq.n	8004c16 <_vfiprintf_r+0x15a>
 8004c88:	9105      	str	r1, [sp, #20]
 8004c8a:	e7c4      	b.n	8004c16 <_vfiprintf_r+0x15a>
 8004c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c90:	4604      	mov	r4, r0
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7f0      	b.n	8004c78 <_vfiprintf_r+0x1bc>
 8004c96:	ab03      	add	r3, sp, #12
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <_vfiprintf_r+0x22c>)
 8004c9e:	a904      	add	r1, sp, #16
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f3af 8000 	nop.w
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	1c78      	adds	r0, r7, #1
 8004caa:	d1d6      	bne.n	8004c5a <_vfiprintf_r+0x19e>
 8004cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cae:	07d9      	lsls	r1, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <_vfiprintf_r+0x202>
 8004cb2:	89ab      	ldrh	r3, [r5, #12]
 8004cb4:	059a      	lsls	r2, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_vfiprintf_r+0x202>
 8004cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cba:	f7ff fddb 	bl	8004874 <__retarget_lock_release_recursive>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	065b      	lsls	r3, r3, #25
 8004cc2:	f53f af1d 	bmi.w	8004b00 <_vfiprintf_r+0x44>
 8004cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cc8:	e71c      	b.n	8004b04 <_vfiprintf_r+0x48>
 8004cca:	ab03      	add	r3, sp, #12
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	462a      	mov	r2, r5
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <_vfiprintf_r+0x22c>)
 8004cd2:	a904      	add	r1, sp, #16
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f879 	bl	8004dcc <_printf_i>
 8004cda:	e7e4      	b.n	8004ca6 <_vfiprintf_r+0x1ea>
 8004cdc:	0800541c 	.word	0x0800541c
 8004ce0:	08005426 	.word	0x08005426
 8004ce4:	00000000 	.word	0x00000000
 8004ce8:	08004a97 	.word	0x08004a97
 8004cec:	08005422 	.word	0x08005422

08004cf0 <_printf_common>:
 8004cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	4699      	mov	r9, r3
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bfb8      	it	lt
 8004d04:	4613      	movlt	r3, r2
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b10a      	cbz	r2, 8004d16 <_printf_common+0x26>
 8004d12:	3301      	adds	r3, #1
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	0699      	lsls	r1, r3, #26
 8004d1a:	bf42      	ittt	mi
 8004d1c:	6833      	ldrmi	r3, [r6, #0]
 8004d1e:	3302      	addmi	r3, #2
 8004d20:	6033      	strmi	r3, [r6, #0]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d106      	bne.n	8004d38 <_printf_common+0x48>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	6832      	ldr	r2, [r6, #0]
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dc26      	bgt.n	8004d86 <_printf_common+0x96>
 8004d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d3c:	1e13      	subs	r3, r2, #0
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	0692      	lsls	r2, r2, #26
 8004d46:	d42b      	bmi.n	8004da0 <_printf_common+0xb0>
 8004d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d01e      	beq.n	8004d94 <_printf_common+0xa4>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	6922      	ldr	r2, [r4, #16]
 8004d5a:	f003 0306 	and.w	r3, r3, #6
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	bf02      	ittt	eq
 8004d62:	68e5      	ldreq	r5, [r4, #12]
 8004d64:	6833      	ldreq	r3, [r6, #0]
 8004d66:	1aed      	subeq	r5, r5, r3
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	bf0c      	ite	eq
 8004d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d70:	2500      	movne	r5, #0
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bfc4      	itt	gt
 8004d76:	1a9b      	subgt	r3, r3, r2
 8004d78:	18ed      	addgt	r5, r5, r3
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	341a      	adds	r4, #26
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	d11a      	bne.n	8004db8 <_printf_common+0xc8>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e008      	b.n	8004d98 <_printf_common+0xa8>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4652      	mov	r2, sl
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	47c0      	blx	r8
 8004d90:	3001      	adds	r0, #1
 8004d92:	d103      	bne.n	8004d9c <_printf_common+0xac>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	e7c6      	b.n	8004d2e <_printf_common+0x3e>
 8004da0:	18e1      	adds	r1, r4, r3
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	2030      	movs	r0, #48	; 0x30
 8004da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004daa:	4422      	add	r2, r4
 8004dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db4:	3302      	adds	r3, #2
 8004db6:	e7c7      	b.n	8004d48 <_printf_common+0x58>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d0e6      	beq.n	8004d94 <_printf_common+0xa4>
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7d9      	b.n	8004d7e <_printf_common+0x8e>
	...

08004dcc <_printf_i>:
 8004dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	7e0f      	ldrb	r7, [r1, #24]
 8004dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dd4:	2f78      	cmp	r7, #120	; 0x78
 8004dd6:	4691      	mov	r9, r2
 8004dd8:	4680      	mov	r8, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	469a      	mov	sl, r3
 8004dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004de2:	d807      	bhi.n	8004df4 <_printf_i+0x28>
 8004de4:	2f62      	cmp	r7, #98	; 0x62
 8004de6:	d80a      	bhi.n	8004dfe <_printf_i+0x32>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	f000 80d4 	beq.w	8004f96 <_printf_i+0x1ca>
 8004dee:	2f58      	cmp	r7, #88	; 0x58
 8004df0:	f000 80c0 	beq.w	8004f74 <_printf_i+0x1a8>
 8004df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dfc:	e03a      	b.n	8004e74 <_printf_i+0xa8>
 8004dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e02:	2b15      	cmp	r3, #21
 8004e04:	d8f6      	bhi.n	8004df4 <_printf_i+0x28>
 8004e06:	a101      	add	r1, pc, #4	; (adr r1, 8004e0c <_printf_i+0x40>)
 8004e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004df5 	.word	0x08004df5
 8004e18:	08004df5 	.word	0x08004df5
 8004e1c:	08004df5 	.word	0x08004df5
 8004e20:	08004df5 	.word	0x08004df5
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004df5 	.word	0x08004df5
 8004e2c:	08004df5 	.word	0x08004df5
 8004e30:	08004df5 	.word	0x08004df5
 8004e34:	08004df5 	.word	0x08004df5
 8004e38:	08004f7d 	.word	0x08004f7d
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004f37 	.word	0x08004f37
 8004e44:	08004df5 	.word	0x08004df5
 8004e48:	08004df5 	.word	0x08004df5
 8004e4c:	08004f9f 	.word	0x08004f9f
 8004e50:	08004df5 	.word	0x08004df5
 8004e54:	08004ea5 	.word	0x08004ea5
 8004e58:	08004df5 	.word	0x08004df5
 8004e5c:	08004df5 	.word	0x08004df5
 8004e60:	08004f3f 	.word	0x08004f3f
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	602a      	str	r2, [r5, #0]
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e74:	2301      	movs	r3, #1
 8004e76:	e09f      	b.n	8004fb8 <_printf_i+0x1ec>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	682b      	ldr	r3, [r5, #0]
 8004e7c:	0607      	lsls	r7, r0, #24
 8004e7e:	f103 0104 	add.w	r1, r3, #4
 8004e82:	6029      	str	r1, [r5, #0]
 8004e84:	d501      	bpl.n	8004e8a <_printf_i+0xbe>
 8004e86:	681e      	ldr	r6, [r3, #0]
 8004e88:	e003      	b.n	8004e92 <_printf_i+0xc6>
 8004e8a:	0646      	lsls	r6, r0, #25
 8004e8c:	d5fb      	bpl.n	8004e86 <_printf_i+0xba>
 8004e8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	da03      	bge.n	8004e9e <_printf_i+0xd2>
 8004e96:	232d      	movs	r3, #45	; 0x2d
 8004e98:	4276      	negs	r6, r6
 8004e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e9e:	485a      	ldr	r0, [pc, #360]	; (8005008 <_printf_i+0x23c>)
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	e012      	b.n	8004eca <_printf_i+0xfe>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	1d19      	adds	r1, r3, #4
 8004eaa:	6029      	str	r1, [r5, #0]
 8004eac:	0605      	lsls	r5, r0, #24
 8004eae:	d501      	bpl.n	8004eb4 <_printf_i+0xe8>
 8004eb0:	681e      	ldr	r6, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <_printf_i+0xee>
 8004eb4:	0641      	lsls	r1, r0, #25
 8004eb6:	d5fb      	bpl.n	8004eb0 <_printf_i+0xe4>
 8004eb8:	881e      	ldrh	r6, [r3, #0]
 8004eba:	4853      	ldr	r0, [pc, #332]	; (8005008 <_printf_i+0x23c>)
 8004ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2308      	moveq	r3, #8
 8004ec2:	230a      	movne	r3, #10
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eca:	6865      	ldr	r5, [r4, #4]
 8004ecc:	60a5      	str	r5, [r4, #8]
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	bfa2      	ittt	ge
 8004ed2:	6821      	ldrge	r1, [r4, #0]
 8004ed4:	f021 0104 	bicge.w	r1, r1, #4
 8004ed8:	6021      	strge	r1, [r4, #0]
 8004eda:	b90e      	cbnz	r6, 8004ee0 <_printf_i+0x114>
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	d04b      	beq.n	8004f78 <_printf_i+0x1ac>
 8004ee0:	4615      	mov	r5, r2
 8004ee2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ee6:	fb03 6711 	mls	r7, r3, r1, r6
 8004eea:	5dc7      	ldrb	r7, [r0, r7]
 8004eec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ef0:	4637      	mov	r7, r6
 8004ef2:	42bb      	cmp	r3, r7
 8004ef4:	460e      	mov	r6, r1
 8004ef6:	d9f4      	bls.n	8004ee2 <_printf_i+0x116>
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d10b      	bne.n	8004f14 <_printf_i+0x148>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	07de      	lsls	r6, r3, #31
 8004f00:	d508      	bpl.n	8004f14 <_printf_i+0x148>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	6861      	ldr	r1, [r4, #4]
 8004f06:	4299      	cmp	r1, r3
 8004f08:	bfde      	ittt	le
 8004f0a:	2330      	movle	r3, #48	; 0x30
 8004f0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f14:	1b52      	subs	r2, r2, r5
 8004f16:	6122      	str	r2, [r4, #16]
 8004f18:	f8cd a000 	str.w	sl, [sp]
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	aa03      	add	r2, sp, #12
 8004f20:	4621      	mov	r1, r4
 8004f22:	4640      	mov	r0, r8
 8004f24:	f7ff fee4 	bl	8004cf0 <_printf_common>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d14a      	bne.n	8004fc2 <_printf_i+0x1f6>
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	b004      	add	sp, #16
 8004f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f043 0320 	orr.w	r3, r3, #32
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	4833      	ldr	r0, [pc, #204]	; (800500c <_printf_i+0x240>)
 8004f40:	2778      	movs	r7, #120	; 0x78
 8004f42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	6829      	ldr	r1, [r5, #0]
 8004f4a:	061f      	lsls	r7, r3, #24
 8004f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f50:	d402      	bmi.n	8004f58 <_printf_i+0x18c>
 8004f52:	065f      	lsls	r7, r3, #25
 8004f54:	bf48      	it	mi
 8004f56:	b2b6      	uxthmi	r6, r6
 8004f58:	07df      	lsls	r7, r3, #31
 8004f5a:	bf48      	it	mi
 8004f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f60:	6029      	str	r1, [r5, #0]
 8004f62:	bf48      	it	mi
 8004f64:	6023      	strmi	r3, [r4, #0]
 8004f66:	b91e      	cbnz	r6, 8004f70 <_printf_i+0x1a4>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	f023 0320 	bic.w	r3, r3, #32
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	2310      	movs	r3, #16
 8004f72:	e7a7      	b.n	8004ec4 <_printf_i+0xf8>
 8004f74:	4824      	ldr	r0, [pc, #144]	; (8005008 <_printf_i+0x23c>)
 8004f76:	e7e4      	b.n	8004f42 <_printf_i+0x176>
 8004f78:	4615      	mov	r5, r2
 8004f7a:	e7bd      	b.n	8004ef8 <_printf_i+0x12c>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	6826      	ldr	r6, [r4, #0]
 8004f80:	6961      	ldr	r1, [r4, #20]
 8004f82:	1d18      	adds	r0, r3, #4
 8004f84:	6028      	str	r0, [r5, #0]
 8004f86:	0635      	lsls	r5, r6, #24
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	d501      	bpl.n	8004f90 <_printf_i+0x1c4>
 8004f8c:	6019      	str	r1, [r3, #0]
 8004f8e:	e002      	b.n	8004f96 <_printf_i+0x1ca>
 8004f90:	0670      	lsls	r0, r6, #25
 8004f92:	d5fb      	bpl.n	8004f8c <_printf_i+0x1c0>
 8004f94:	8019      	strh	r1, [r3, #0]
 8004f96:	2300      	movs	r3, #0
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	4615      	mov	r5, r2
 8004f9c:	e7bc      	b.n	8004f18 <_printf_i+0x14c>
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	602a      	str	r2, [r5, #0]
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	6862      	ldr	r2, [r4, #4]
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4628      	mov	r0, r5
 8004fac:	f7fb f918 	bl	80001e0 <memchr>
 8004fb0:	b108      	cbz	r0, 8004fb6 <_printf_i+0x1ea>
 8004fb2:	1b40      	subs	r0, r0, r5
 8004fb4:	6060      	str	r0, [r4, #4]
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	6123      	str	r3, [r4, #16]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc0:	e7aa      	b.n	8004f18 <_printf_i+0x14c>
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4640      	mov	r0, r8
 8004fca:	47d0      	blx	sl
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0ad      	beq.n	8004f2c <_printf_i+0x160>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	079b      	lsls	r3, r3, #30
 8004fd4:	d413      	bmi.n	8004ffe <_printf_i+0x232>
 8004fd6:	68e0      	ldr	r0, [r4, #12]
 8004fd8:	9b03      	ldr	r3, [sp, #12]
 8004fda:	4298      	cmp	r0, r3
 8004fdc:	bfb8      	it	lt
 8004fde:	4618      	movlt	r0, r3
 8004fe0:	e7a6      	b.n	8004f30 <_printf_i+0x164>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4640      	mov	r0, r8
 8004fea:	47d0      	blx	sl
 8004fec:	3001      	adds	r0, #1
 8004fee:	d09d      	beq.n	8004f2c <_printf_i+0x160>
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	9903      	ldr	r1, [sp, #12]
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	42ab      	cmp	r3, r5
 8004ffa:	dcf2      	bgt.n	8004fe2 <_printf_i+0x216>
 8004ffc:	e7eb      	b.n	8004fd6 <_printf_i+0x20a>
 8004ffe:	2500      	movs	r5, #0
 8005000:	f104 0619 	add.w	r6, r4, #25
 8005004:	e7f5      	b.n	8004ff2 <_printf_i+0x226>
 8005006:	bf00      	nop
 8005008:	0800542d 	.word	0x0800542d
 800500c:	0800543e 	.word	0x0800543e

08005010 <__sflush_r>:
 8005010:	898a      	ldrh	r2, [r1, #12]
 8005012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	0710      	lsls	r0, r2, #28
 800501a:	460c      	mov	r4, r1
 800501c:	d458      	bmi.n	80050d0 <__sflush_r+0xc0>
 800501e:	684b      	ldr	r3, [r1, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	dc05      	bgt.n	8005030 <__sflush_r+0x20>
 8005024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	dc02      	bgt.n	8005030 <__sflush_r+0x20>
 800502a:	2000      	movs	r0, #0
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005032:	2e00      	cmp	r6, #0
 8005034:	d0f9      	beq.n	800502a <__sflush_r+0x1a>
 8005036:	2300      	movs	r3, #0
 8005038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800503c:	682f      	ldr	r7, [r5, #0]
 800503e:	6a21      	ldr	r1, [r4, #32]
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	d032      	beq.n	80050aa <__sflush_r+0x9a>
 8005044:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	075a      	lsls	r2, r3, #29
 800504a:	d505      	bpl.n	8005058 <__sflush_r+0x48>
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	1ac0      	subs	r0, r0, r3
 8005050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005052:	b10b      	cbz	r3, 8005058 <__sflush_r+0x48>
 8005054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005056:	1ac0      	subs	r0, r0, r3
 8005058:	2300      	movs	r3, #0
 800505a:	4602      	mov	r2, r0
 800505c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800505e:	6a21      	ldr	r1, [r4, #32]
 8005060:	4628      	mov	r0, r5
 8005062:	47b0      	blx	r6
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	d106      	bne.n	8005078 <__sflush_r+0x68>
 800506a:	6829      	ldr	r1, [r5, #0]
 800506c:	291d      	cmp	r1, #29
 800506e:	d82b      	bhi.n	80050c8 <__sflush_r+0xb8>
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <__sflush_r+0x108>)
 8005072:	410a      	asrs	r2, r1
 8005074:	07d6      	lsls	r6, r2, #31
 8005076:	d427      	bmi.n	80050c8 <__sflush_r+0xb8>
 8005078:	2200      	movs	r2, #0
 800507a:	6062      	str	r2, [r4, #4]
 800507c:	04d9      	lsls	r1, r3, #19
 800507e:	6922      	ldr	r2, [r4, #16]
 8005080:	6022      	str	r2, [r4, #0]
 8005082:	d504      	bpl.n	800508e <__sflush_r+0x7e>
 8005084:	1c42      	adds	r2, r0, #1
 8005086:	d101      	bne.n	800508c <__sflush_r+0x7c>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b903      	cbnz	r3, 800508e <__sflush_r+0x7e>
 800508c:	6560      	str	r0, [r4, #84]	; 0x54
 800508e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005090:	602f      	str	r7, [r5, #0]
 8005092:	2900      	cmp	r1, #0
 8005094:	d0c9      	beq.n	800502a <__sflush_r+0x1a>
 8005096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800509a:	4299      	cmp	r1, r3
 800509c:	d002      	beq.n	80050a4 <__sflush_r+0x94>
 800509e:	4628      	mov	r0, r5
 80050a0:	f7ff fbea 	bl	8004878 <_free_r>
 80050a4:	2000      	movs	r0, #0
 80050a6:	6360      	str	r0, [r4, #52]	; 0x34
 80050a8:	e7c0      	b.n	800502c <__sflush_r+0x1c>
 80050aa:	2301      	movs	r3, #1
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	1c41      	adds	r1, r0, #1
 80050b2:	d1c8      	bne.n	8005046 <__sflush_r+0x36>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0c5      	beq.n	8005046 <__sflush_r+0x36>
 80050ba:	2b1d      	cmp	r3, #29
 80050bc:	d001      	beq.n	80050c2 <__sflush_r+0xb2>
 80050be:	2b16      	cmp	r3, #22
 80050c0:	d101      	bne.n	80050c6 <__sflush_r+0xb6>
 80050c2:	602f      	str	r7, [r5, #0]
 80050c4:	e7b1      	b.n	800502a <__sflush_r+0x1a>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e7ad      	b.n	800502c <__sflush_r+0x1c>
 80050d0:	690f      	ldr	r7, [r1, #16]
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	d0a9      	beq.n	800502a <__sflush_r+0x1a>
 80050d6:	0793      	lsls	r3, r2, #30
 80050d8:	680e      	ldr	r6, [r1, #0]
 80050da:	bf08      	it	eq
 80050dc:	694b      	ldreq	r3, [r1, #20]
 80050de:	600f      	str	r7, [r1, #0]
 80050e0:	bf18      	it	ne
 80050e2:	2300      	movne	r3, #0
 80050e4:	eba6 0807 	sub.w	r8, r6, r7
 80050e8:	608b      	str	r3, [r1, #8]
 80050ea:	f1b8 0f00 	cmp.w	r8, #0
 80050ee:	dd9c      	ble.n	800502a <__sflush_r+0x1a>
 80050f0:	6a21      	ldr	r1, [r4, #32]
 80050f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050f4:	4643      	mov	r3, r8
 80050f6:	463a      	mov	r2, r7
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dc06      	bgt.n	800510e <__sflush_r+0xfe>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e78e      	b.n	800502c <__sflush_r+0x1c>
 800510e:	4407      	add	r7, r0
 8005110:	eba8 0800 	sub.w	r8, r8, r0
 8005114:	e7e9      	b.n	80050ea <__sflush_r+0xda>
 8005116:	bf00      	nop
 8005118:	dfbffffe 	.word	0xdfbffffe

0800511c <_fflush_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	4605      	mov	r5, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b913      	cbnz	r3, 800512c <_fflush_r+0x10>
 8005126:	2500      	movs	r5, #0
 8005128:	4628      	mov	r0, r5
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	b118      	cbz	r0, 8005136 <_fflush_r+0x1a>
 800512e:	6a03      	ldr	r3, [r0, #32]
 8005130:	b90b      	cbnz	r3, 8005136 <_fflush_r+0x1a>
 8005132:	f7ff fa99 	bl	8004668 <__sinit>
 8005136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f3      	beq.n	8005126 <_fflush_r+0xa>
 800513e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005140:	07d0      	lsls	r0, r2, #31
 8005142:	d404      	bmi.n	800514e <_fflush_r+0x32>
 8005144:	0599      	lsls	r1, r3, #22
 8005146:	d402      	bmi.n	800514e <_fflush_r+0x32>
 8005148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514a:	f7ff fb92 	bl	8004872 <__retarget_lock_acquire_recursive>
 800514e:	4628      	mov	r0, r5
 8005150:	4621      	mov	r1, r4
 8005152:	f7ff ff5d 	bl	8005010 <__sflush_r>
 8005156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005158:	07da      	lsls	r2, r3, #31
 800515a:	4605      	mov	r5, r0
 800515c:	d4e4      	bmi.n	8005128 <_fflush_r+0xc>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	059b      	lsls	r3, r3, #22
 8005162:	d4e1      	bmi.n	8005128 <_fflush_r+0xc>
 8005164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005166:	f7ff fb85 	bl	8004874 <__retarget_lock_release_recursive>
 800516a:	e7dd      	b.n	8005128 <_fflush_r+0xc>

0800516c <__swbuf_r>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	460e      	mov	r6, r1
 8005170:	4614      	mov	r4, r2
 8005172:	4605      	mov	r5, r0
 8005174:	b118      	cbz	r0, 800517e <__swbuf_r+0x12>
 8005176:	6a03      	ldr	r3, [r0, #32]
 8005178:	b90b      	cbnz	r3, 800517e <__swbuf_r+0x12>
 800517a:	f7ff fa75 	bl	8004668 <__sinit>
 800517e:	69a3      	ldr	r3, [r4, #24]
 8005180:	60a3      	str	r3, [r4, #8]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	071a      	lsls	r2, r3, #28
 8005186:	d525      	bpl.n	80051d4 <__swbuf_r+0x68>
 8005188:	6923      	ldr	r3, [r4, #16]
 800518a:	b31b      	cbz	r3, 80051d4 <__swbuf_r+0x68>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	6922      	ldr	r2, [r4, #16]
 8005190:	1a98      	subs	r0, r3, r2
 8005192:	6963      	ldr	r3, [r4, #20]
 8005194:	b2f6      	uxtb	r6, r6
 8005196:	4283      	cmp	r3, r0
 8005198:	4637      	mov	r7, r6
 800519a:	dc04      	bgt.n	80051a6 <__swbuf_r+0x3a>
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f7ff ffbc 	bl	800511c <_fflush_r>
 80051a4:	b9e0      	cbnz	r0, 80051e0 <__swbuf_r+0x74>
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60a3      	str	r3, [r4, #8]
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	701e      	strb	r6, [r3, #0]
 80051b4:	6962      	ldr	r2, [r4, #20]
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d004      	beq.n	80051c6 <__swbuf_r+0x5a>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	07db      	lsls	r3, r3, #31
 80051c0:	d506      	bpl.n	80051d0 <__swbuf_r+0x64>
 80051c2:	2e0a      	cmp	r6, #10
 80051c4:	d104      	bne.n	80051d0 <__swbuf_r+0x64>
 80051c6:	4621      	mov	r1, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff ffa7 	bl	800511c <_fflush_r>
 80051ce:	b938      	cbnz	r0, 80051e0 <__swbuf_r+0x74>
 80051d0:	4638      	mov	r0, r7
 80051d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d4:	4621      	mov	r1, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f806 	bl	80051e8 <__swsetup_r>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d0d5      	beq.n	800518c <__swbuf_r+0x20>
 80051e0:	f04f 37ff 	mov.w	r7, #4294967295
 80051e4:	e7f4      	b.n	80051d0 <__swbuf_r+0x64>
	...

080051e8 <__swsetup_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <__swsetup_r+0xac>)
 80051ec:	4605      	mov	r5, r0
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	460c      	mov	r4, r1
 80051f2:	b118      	cbz	r0, 80051fc <__swsetup_r+0x14>
 80051f4:	6a03      	ldr	r3, [r0, #32]
 80051f6:	b90b      	cbnz	r3, 80051fc <__swsetup_r+0x14>
 80051f8:	f7ff fa36 	bl	8004668 <__sinit>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005202:	0718      	lsls	r0, r3, #28
 8005204:	d422      	bmi.n	800524c <__swsetup_r+0x64>
 8005206:	06d9      	lsls	r1, r3, #27
 8005208:	d407      	bmi.n	800521a <__swsetup_r+0x32>
 800520a:	2309      	movs	r3, #9
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	e034      	b.n	8005284 <__swsetup_r+0x9c>
 800521a:	0758      	lsls	r0, r3, #29
 800521c:	d512      	bpl.n	8005244 <__swsetup_r+0x5c>
 800521e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005220:	b141      	cbz	r1, 8005234 <__swsetup_r+0x4c>
 8005222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005226:	4299      	cmp	r1, r3
 8005228:	d002      	beq.n	8005230 <__swsetup_r+0x48>
 800522a:	4628      	mov	r0, r5
 800522c:	f7ff fb24 	bl	8004878 <_free_r>
 8005230:	2300      	movs	r3, #0
 8005232:	6363      	str	r3, [r4, #52]	; 0x34
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	2300      	movs	r3, #0
 800523e:	6063      	str	r3, [r4, #4]
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	f043 0308 	orr.w	r3, r3, #8
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	b94b      	cbnz	r3, 8005264 <__swsetup_r+0x7c>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525a:	d003      	beq.n	8005264 <__swsetup_r+0x7c>
 800525c:	4621      	mov	r1, r4
 800525e:	4628      	mov	r0, r5
 8005260:	f000 f850 	bl	8005304 <__smakebuf_r>
 8005264:	89a0      	ldrh	r0, [r4, #12]
 8005266:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800526a:	f010 0301 	ands.w	r3, r0, #1
 800526e:	d00a      	beq.n	8005286 <__swsetup_r+0x9e>
 8005270:	2300      	movs	r3, #0
 8005272:	60a3      	str	r3, [r4, #8]
 8005274:	6963      	ldr	r3, [r4, #20]
 8005276:	425b      	negs	r3, r3
 8005278:	61a3      	str	r3, [r4, #24]
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	b943      	cbnz	r3, 8005290 <__swsetup_r+0xa8>
 800527e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005282:	d1c4      	bne.n	800520e <__swsetup_r+0x26>
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	0781      	lsls	r1, r0, #30
 8005288:	bf58      	it	pl
 800528a:	6963      	ldrpl	r3, [r4, #20]
 800528c:	60a3      	str	r3, [r4, #8]
 800528e:	e7f4      	b.n	800527a <__swsetup_r+0x92>
 8005290:	2000      	movs	r0, #0
 8005292:	e7f7      	b.n	8005284 <__swsetup_r+0x9c>
 8005294:	20000064 	.word	0x20000064

08005298 <_sbrk_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	; (80052b4 <_sbrk_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fc fc7c 	bl	8001ba0 <_sbrk>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_sbrk_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_sbrk_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	2000029c 	.word	0x2000029c

080052b8 <__swhatbuf_r>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	b096      	sub	sp, #88	; 0x58
 80052c4:	4615      	mov	r5, r2
 80052c6:	461e      	mov	r6, r3
 80052c8:	da0d      	bge.n	80052e6 <__swhatbuf_r+0x2e>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80052da:	2340      	movne	r3, #64	; 0x40
 80052dc:	2000      	movs	r0, #0
 80052de:	6031      	str	r1, [r6, #0]
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	b016      	add	sp, #88	; 0x58
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	466a      	mov	r2, sp
 80052e8:	f000 f848 	bl	800537c <_fstat_r>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	dbec      	blt.n	80052ca <__swhatbuf_r+0x12>
 80052f0:	9901      	ldr	r1, [sp, #4]
 80052f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80052f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80052fa:	4259      	negs	r1, r3
 80052fc:	4159      	adcs	r1, r3
 80052fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005302:	e7eb      	b.n	80052dc <__swhatbuf_r+0x24>

08005304 <__smakebuf_r>:
 8005304:	898b      	ldrh	r3, [r1, #12]
 8005306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005308:	079d      	lsls	r5, r3, #30
 800530a:	4606      	mov	r6, r0
 800530c:	460c      	mov	r4, r1
 800530e:	d507      	bpl.n	8005320 <__smakebuf_r+0x1c>
 8005310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	6123      	str	r3, [r4, #16]
 8005318:	2301      	movs	r3, #1
 800531a:	6163      	str	r3, [r4, #20]
 800531c:	b002      	add	sp, #8
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	ab01      	add	r3, sp, #4
 8005322:	466a      	mov	r2, sp
 8005324:	f7ff ffc8 	bl	80052b8 <__swhatbuf_r>
 8005328:	9900      	ldr	r1, [sp, #0]
 800532a:	4605      	mov	r5, r0
 800532c:	4630      	mov	r0, r6
 800532e:	f7ff fb0f 	bl	8004950 <_malloc_r>
 8005332:	b948      	cbnz	r0, 8005348 <__smakebuf_r+0x44>
 8005334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005338:	059a      	lsls	r2, r3, #22
 800533a:	d4ef      	bmi.n	800531c <__smakebuf_r+0x18>
 800533c:	f023 0303 	bic.w	r3, r3, #3
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	e7e3      	b.n	8005310 <__smakebuf_r+0xc>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	9b00      	ldr	r3, [sp, #0]
 8005354:	6163      	str	r3, [r4, #20]
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	6120      	str	r0, [r4, #16]
 800535a:	b15b      	cbz	r3, 8005374 <__smakebuf_r+0x70>
 800535c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005360:	4630      	mov	r0, r6
 8005362:	f000 f81d 	bl	80053a0 <_isatty_r>
 8005366:	b128      	cbz	r0, 8005374 <__smakebuf_r+0x70>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	431d      	orrs	r5, r3
 8005378:	81a5      	strh	r5, [r4, #12]
 800537a:	e7cf      	b.n	800531c <__smakebuf_r+0x18>

0800537c <_fstat_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	; (800539c <_fstat_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	f7fc fbe0 	bl	8001b4e <_fstat>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_fstat_r+0x1c>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b103      	cbz	r3, 8005398 <_fstat_r+0x1c>
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	2000029c 	.word	0x2000029c

080053a0 <_isatty_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d06      	ldr	r5, [pc, #24]	; (80053bc <_isatty_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7fc fbdf 	bl	8001b6e <_isatty>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_isatty_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_isatty_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	2000029c 	.word	0x2000029c

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
