
ECE198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004948  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004948  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d710  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ded  00000000  00000000  0002d7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a68  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182b9  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f198  00000000  00000000  00049049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aa40  00000000  00000000  000581e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fbc  00000000  00000000  000f2c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f6be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004840 	.word	0x08004840

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004840 	.word	0x08004840

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <ADC_Select_CH0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <ADC_Select_CH0+0x3c>)
 80005f0:	f000 ffbe 	bl	8001570 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <ADC_Select_CH0+0x32>
  {
    Error_Handler();
 80005fa:	f000 fb67 	bl	8000ccc <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084

0800060c <ADC_Select_CH4>:

void ADC_Select_CH4() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800061e:	2304      	movs	r3, #4
 8000620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000626:	2304      	movs	r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <ADC_Select_CH4+0x3c>)
 8000630:	f000 ff9e 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <ADC_Select_CH4+0x32>
  {
    Error_Handler();
 800063a:	f000 fb47 	bl	8000ccc <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000084 	.word	0x20000084

0800064c <ADC_Select_CH8>:

void ADC_Select_CH8() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800065e:	2308      	movs	r3, #8
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000666:	2306      	movs	r3, #6
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <ADC_Select_CH8+0x3c>)
 8000670:	f000 ff7e 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <ADC_Select_CH8+0x32>
  {
    Error_Handler();
 800067a:	f000 fb27 	bl	8000ccc <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000084 	.word	0x20000084

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fd37 	bl	8001104 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f8df 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa5d 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069e:	f000 fa31 	bl	8000b04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a2:	f000 f945 	bl	8000930 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006a6:	f000 f9b5 	bl	8000a14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	4863      	ldr	r0, [pc, #396]	; (800083c <main+0x1b0>)
 80006ae:	f002 f959 	bl	8002964 <HAL_TIM_PWM_Start>
  int cnt = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t prevTick = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  const int CLOCK_FREQ = 84000000;
 80006ba:	4b61      	ldr	r3, [pc, #388]	; (8000840 <main+0x1b4>)
 80006bc:	61fb      	str	r3, [r7, #28]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t tick = HAL_GetTick();
 80006be:	f000 fd87 	bl	80011d0 <HAL_GetTick>
 80006c2:	61b8      	str	r0, [r7, #24]
	  if (tick - prevTick > 500) {
 80006c4:	69ba      	ldr	r2, [r7, #24]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006ce:	d9f6      	bls.n	80006be <main+0x32>

		  ADC_Select_CH0();
 80006d0:	f7ff ff7c 	bl	80005cc <ADC_Select_CH0>
		  HAL_ADC_Start(&hadc1);
 80006d4:	485b      	ldr	r0, [pc, #364]	; (8000844 <main+0x1b8>)
 80006d6:	f000 fdcb 	bl	8001270 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80006da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006de:	4859      	ldr	r0, [pc, #356]	; (8000844 <main+0x1b8>)
 80006e0:	f000 fead 	bl	800143e <HAL_ADC_PollForConversion>
		  int a = HAL_ADC_GetValue(&hadc1);
 80006e4:	4857      	ldr	r0, [pc, #348]	; (8000844 <main+0x1b8>)
 80006e6:	f000 ff35 	bl	8001554 <HAL_ADC_GetValue>
 80006ea:	4603      	mov	r3, r0
 80006ec:	617b      	str	r3, [r7, #20]
		  HAL_ADC_Stop(&hadc1);
 80006ee:	4855      	ldr	r0, [pc, #340]	; (8000844 <main+0x1b8>)
 80006f0:	f000 fe72 	bl	80013d8 <HAL_ADC_Stop>

		  ADC_Select_CH4();
 80006f4:	f7ff ff8a 	bl	800060c <ADC_Select_CH4>
		  HAL_ADC_Start(&hadc1);
 80006f8:	4852      	ldr	r0, [pc, #328]	; (8000844 <main+0x1b8>)
 80006fa:	f000 fdb9 	bl	8001270 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80006fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000702:	4850      	ldr	r0, [pc, #320]	; (8000844 <main+0x1b8>)
 8000704:	f000 fe9b 	bl	800143e <HAL_ADC_PollForConversion>
		  int b = HAL_ADC_GetValue(&hadc1);
 8000708:	484e      	ldr	r0, [pc, #312]	; (8000844 <main+0x1b8>)
 800070a:	f000 ff23 	bl	8001554 <HAL_ADC_GetValue>
 800070e:	4603      	mov	r3, r0
 8000710:	613b      	str	r3, [r7, #16]
		  HAL_ADC_Stop(&hadc1);
 8000712:	484c      	ldr	r0, [pc, #304]	; (8000844 <main+0x1b8>)
 8000714:	f000 fe60 	bl	80013d8 <HAL_ADC_Stop>

		  ADC_Select_CH8();
 8000718:	f7ff ff98 	bl	800064c <ADC_Select_CH8>
		  HAL_ADC_Start(&hadc1);
 800071c:	4849      	ldr	r0, [pc, #292]	; (8000844 <main+0x1b8>)
 800071e:	f000 fda7 	bl	8001270 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <main+0x1b8>)
 8000728:	f000 fe89 	bl	800143e <HAL_ADC_PollForConversion>
		  int c = HAL_ADC_GetValue(&hadc1);
 800072c:	4845      	ldr	r0, [pc, #276]	; (8000844 <main+0x1b8>)
 800072e:	f000 ff11 	bl	8001554 <HAL_ADC_GetValue>
 8000732:	4603      	mov	r3, r0
 8000734:	60fb      	str	r3, [r7, #12]
		  HAL_ADC_Stop(&hadc1);
 8000736:	4843      	ldr	r0, [pc, #268]	; (8000844 <main+0x1b8>)
 8000738:	f000 fe4e 	bl	80013d8 <HAL_ADC_Stop>

		  bool B2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4842      	ldr	r0, [pc, #264]	; (8000848 <main+0x1bc>)
 8000740:	f001 fb9e 	bl	8001e80 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	72fb      	strb	r3, [r7, #11]
		  bool B3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	483e      	ldr	r0, [pc, #248]	; (800084c <main+0x1c0>)
 8000754:	f001 fb94 	bl	8001e80 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	72bb      	strb	r3, [r7, #10]

		  printf("FSR: %d TMP: %d LIGHT: %d B2: %d B3: %d\n", a, b, c, B2, B3);
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	7aba      	ldrb	r2, [r7, #10]
 8000768:	9201      	str	r2, [sp, #4]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	6979      	ldr	r1, [r7, #20]
 8000772:	4837      	ldr	r0, [pc, #220]	; (8000850 <main+0x1c4>)
 8000774:	f003 f9ee 	bl	8003b54 <iprintf>

		  prevTick = tick;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	623b      	str	r3, [r7, #32]
		  cnt += 1;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	3301      	adds	r3, #1
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
		  cnt %= 4;
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	425a      	negs	r2, r3
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	f002 0203 	and.w	r2, r2, #3
 800078e:	bf58      	it	pl
 8000790:	4253      	negpl	r3, r2
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,cnt == 0);
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	4828      	ldr	r0, [pc, #160]	; (8000848 <main+0x1bc>)
 80007a8:	f001 fb82 	bl	8001eb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,cnt == 1);
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <main+0x1bc>)
 80007c0:	f001 fb76 	bl	8001eb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,cnt == 2);
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <main+0x1c8>)
 80007d6:	f001 fb6b 	bl	8001eb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,cnt == 3);
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	2b03      	cmp	r3, #3
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <main+0x1bc>)
 80007ec:	f001 fb60 	bl	8001eb0 <HAL_GPIO_WritePin>

		  int freq = (cnt + 1)*120;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	4613      	mov	r3, r2
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, CLOCK_FREQ / freq);
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	fb92 f2f3 	sdiv	r2, r2, r3
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <main+0x1b0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	fb92 f3f3 	sdiv	r3, r2, r3
 8000814:	461a      	mov	r2, r3
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <main+0x1b0>)
 8000818:	60da      	str	r2, [r3, #12]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, CLOCK_FREQ / freq / 2);
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000822:	0fda      	lsrs	r2, r3, #31
 8000824:	4413      	add	r3, r2
 8000826:	105b      	asrs	r3, r3, #1
 8000828:	461a      	mov	r2, r3
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <main+0x1b0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <main+0x1b0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  {
 8000838:	e741      	b.n	80006be <main+0x32>
 800083a:	bf00      	nop
 800083c:	200000cc 	.word	0x200000cc
 8000840:	0501bd00 	.word	0x0501bd00
 8000844:	20000084 	.word	0x20000084
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800
 8000850:	08004858 	.word	0x08004858
 8000854:	40020400 	.word	0x40020400

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f9c9 	bl	8003bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <SystemClock_Config+0xd0>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a28      	ldr	r2, [pc, #160]	; (8000928 <SystemClock_Config+0xd0>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <SystemClock_Config+0xd4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <SystemClock_Config+0xd4>)
 80008a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <SystemClock_Config+0xd4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2310      	movs	r3, #16
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	2302      	movs	r3, #2
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008cc:	2310      	movs	r3, #16
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d6:	2304      	movs	r3, #4
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008da:	2307      	movs	r3, #7
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fafe 	bl	8001ee4 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ee:	f000 f9ed 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fd60 	bl	80023d4 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800091a:	f000 f9d7 	bl	8000ccc <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000944:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <MX_ADC1_Init+0xdc>)
 8000946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_ADC1_Init+0xd8>)
 800094a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000958:	2201      	movs	r2, #1
 800095a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_ADC1_Init+0xd8>)
 800095e:	2201      	movs	r2, #1
 8000960:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_ADC1_Init+0xd8>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_ADC1_Init+0xe0>)
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_ADC1_Init+0xd8>)
 800097e:	2203      	movs	r2, #3
 8000980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_ADC1_Init+0xd8>)
 800098c:	2201      	movs	r2, #1
 800098e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_ADC1_Init+0xd8>)
 8000992:	f000 fc29 	bl	80011e8 <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800099c:	f000 f996 	bl	8000ccc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_ADC1_Init+0xd8>)
 80009b2:	f000 fddd 	bl	8001570 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009bc:	f000 f986 	bl	8000ccc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80009c8:	2304      	movs	r3, #4
 80009ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_ADC1_Init+0xd8>)
 80009d2:	f000 fdcd 	bl	8001570 <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009dc:	f000 f976 	bl	8000ccc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009e0:	2308      	movs	r3, #8
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80009e8:	2306      	movs	r3, #6
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_ADC1_Init+0xd8>)
 80009f2:	f000 fdbd 	bl	8001570 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80009fc:	f000 f966 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000084 	.word	0x20000084
 8000a0c:	40012000 	.word	0x40012000
 8000a10:	0f000001 	.word	0x0f000001

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 700000;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a6c:	f001 fed2 	bl	8002814 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a76:	f000 f929 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a88:	f002 f8de 	bl	8002c48 <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a92:	f000 f91b 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000a98:	f001 ff0b 	bl	80028b2 <HAL_TIM_PWM_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000aa2:	f000 f913 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000ab6:	f002 fc5b 	bl	8003370 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ac0:	f000 f904 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	; 0x60
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 350000;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_TIM2_Init+0xec>)
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000adc:	f001 fff2 	bl	8002ac4 <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000ae6:	f000 f8f1 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM2_Init+0xe4>)
 8000aec:	f000 f99c 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	; 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000cc 	.word	0x200000cc
 8000afc:	000aae60 	.word	0x000aae60
 8000b00:	00055730 	.word	0x00055730

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f002 fc86 	bl	800344c <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f8c1 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000114 	.word	0x20000114
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a35      	ldr	r2, [pc, #212]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000be4:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MX_GPIO_Init+0x130>)
 8000be6:	f001 f963 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4827      	ldr	r0, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bf0:	f001 f95e 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <MX_GPIO_Init+0x138>)
 8000c0c:	f000 ffb4 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_GPIO_Init+0x130>)
 8000c24:	f000 ffa8 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED0_Pin;
 8000c28:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_GPIO_Init+0x130>)
 8000c42:	f000 ff99 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_GPIO_Init+0x138>)
 8000c5a:	f000 ff8d 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000c76:	f000 ff7f 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800

08000c94 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e009      	b.n	8000cba <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60ba      	str	r2, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc64 	bl	800057c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf1      	blt.n	8000ca6 <_write+0x12>
  }
  return len;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d16:	2007      	movs	r0, #7
 8000d18:	f000 fefa 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <HAL_ADC_MspInit+0xb0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d141      	bne.n	8000dce <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_ADC_MspInit+0xb4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FSR_Pin|TMP_Pin;
 8000d9e:	2311      	movs	r3, #17
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_ADC_MspInit+0xb8>)
 8000db2:	f000 fee1 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHT_Pin;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHT_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_ADC_MspInit+0xbc>)
 8000dca:	f000 fed5 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40012000 	.word	0x40012000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df8:	d10d      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e48:	d11d      	bne.n	8000e86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_TIM_MspPostInit+0x68>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_TIM_MspPostInit+0x68>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_TIM_MspPostInit+0x68>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000e66:	2320      	movs	r3, #32
 8000e68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e82:	f000 fe79 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_UART_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12b      	bne.n	8000f12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_UART_MspInit+0x8c>)
 8000f0e:	f000 fe33 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f918 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f002 fe24 	bl	8003c9c <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20018000 	.word	0x20018000
 8001080:	00000400 	.word	0x00000400
 8001084:	20000158 	.word	0x20000158
 8001088:	200002b0 	.word	0x200002b0

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010da:	f7ff ffd7 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 fde3 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fad3 	bl	800068c <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010f4:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 80010f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010fc:	200002ac 	.word	0x200002ac

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 fcef 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fdce 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fcf9 	bl	8001b5e <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 fccf 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2000015c 	.word	0x2000015c

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000015c 	.word	0x2000015c

080011e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e033      	b.n	8001266 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fd8e 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800122e:	f023 0302 	bic.w	r3, r3, #2
 8001232:	f043 0202 	orr.w	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 faba 	bl	80017b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
 8001256:	e001      	b.n	800125c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADC_Start+0x1a>
 8001286:	2302      	movs	r3, #2
 8001288:	e097      	b.n	80013ba <HAL_ADC_Start+0x14a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d018      	beq.n	80012d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_ADC_Start+0x158>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a45      	ldr	r2, [pc, #276]	; (80013cc <HAL_ADC_Start+0x15c>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9a      	lsrs	r2, r3, #18
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d15f      	bne.n	80013a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131e:	d106      	bne.n	800132e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f023 0206 	bic.w	r2, r3, #6
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
 800132c:	e002      	b.n	8001334 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_ADC_Start+0x160>)
 800133e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001348:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10f      	bne.n	8001376 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d129      	bne.n	80013b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e020      	b.n	80013b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_ADC_Start+0x164>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d11b      	bne.n	80013b8 <HAL_ADC_Start+0x148>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d114      	bne.n	80013b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	e00b      	b.n	80013b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f043 0210 	orr.w	r2, r3, #16
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	40012300 	.word	0x40012300
 80013d4:	40012000 	.word	0x40012000

080013d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Stop+0x16>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e021      	b.n	8001432 <HAL_ADC_Stop+0x5a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d113      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e063      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001484:	f7ff fea4 	bl	80011d0 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800148a:	e021      	b.n	80014d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d01d      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_ADC_PollForConversion+0x6c>
 800149a:	f7ff fe99 	bl	80011d0 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d212      	bcs.n	80014d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d00b      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e03d      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d1d6      	bne.n	800148c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f06f 0212 	mvn.w	r2, #18
 80014e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d123      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11f      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d111      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1c>
 8001588:	2302      	movs	r3, #2
 800158a:	e105      	b.n	8001798 <HAL_ADC_ConfigChannel+0x228>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d925      	bls.n	80015e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	3b1e      	subs	r3, #30
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4403      	add	r3, r0
 80015da:	3b1e      	subs	r3, #30
 80015dc:	409a      	lsls	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e022      	b.n	800162e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	2207      	movs	r2, #7
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	4603      	mov	r3, r0
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4403      	add	r3, r0
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d824      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b05      	subs	r3, #5
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	400a      	ands	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b05      	subs	r3, #5
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
 800167e:	e04c      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d824      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b23      	subs	r3, #35	; 0x23
 800169a:	221f      	movs	r2, #31
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43da      	mvns	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	400a      	ands	r2, r1
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b23      	subs	r3, #35	; 0x23
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	e023      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b41      	subs	r3, #65	; 0x41
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	400a      	ands	r2, r1
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b41      	subs	r3, #65	; 0x41
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_ADC_ConfigChannel+0x234>)
 800171c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_ADC_ConfigChannel+0x238>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d109      	bne.n	800173c <HAL_ADC_ConfigChannel+0x1cc>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d105      	bne.n	800173c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_ADC_ConfigChannel+0x238>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d123      	bne.n	800178e <HAL_ADC_ConfigChannel+0x21e>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d003      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x1e6>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b11      	cmp	r3, #17
 8001754:	d11b      	bne.n	800178e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d111      	bne.n	800178e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_ADC_ConfigChannel+0x23c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_ADC_ConfigChannel+0x240>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9a      	lsrs	r2, r3, #18
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001780:	e002      	b.n	8001788 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3b01      	subs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40012300 	.word	0x40012300
 80017a8:	40012000 	.word	0x40012000
 80017ac:	20000000 	.word	0x20000000
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <ADC_Init+0x1f0>)
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	021a      	lsls	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800180c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <ADC_Init+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e00f      	b.n	80018b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0202 	bic.w	r2, r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7e1b      	ldrb	r3, [r3, #24]
 80018cc:	005a      	lsls	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01b      	beq.n	8001918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	035a      	lsls	r2, r3, #13
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	e007      	b.n	8001928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	3b01      	subs	r3, #1
 8001944:	051a      	lsls	r2, r3, #20
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800195c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6899      	ldr	r1, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800196a:	025a      	lsls	r2, r3, #9
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	029a      	lsls	r2, r3, #10
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40012300 	.word	0x40012300
 80019a8:	0f000001 	.word	0x0f000001

080019ac <__NVIC_SetPriorityGrouping>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_SetPriority>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff47 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff5c 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb0 	bl	8001acc <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e159      	b.n	8001e48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8148 	bne.w	8001e42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a2 	beq.w	8001e42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_GPIO_Init+0x2e8>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <HAL_GPIO_Init+0x2e8>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <HAL_GPIO_Init+0x2e8>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a49      	ldr	r2, [pc, #292]	; (8001e68 <HAL_GPIO_Init+0x2f0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x202>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a48      	ldr	r2, [pc, #288]	; (8001e6c <HAL_GPIO_Init+0x2f4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x1fe>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a47      	ldr	r2, [pc, #284]	; (8001e70 <HAL_GPIO_Init+0x2f8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x1fa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a46      	ldr	r2, [pc, #280]	; (8001e74 <HAL_GPIO_Init+0x2fc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x1f6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x1f2>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x204>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8c:	4935      	ldr	r1, [pc, #212]	; (8001e64 <HAL_GPIO_Init+0x2ec>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e12:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	f67f aea2 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e267      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d075      	beq.n	8001fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d00c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0e:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d112      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1a:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	4b7e      	ldr	r3, [pc, #504]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x108>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d157      	bne.n	8001fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e242      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x74>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x98>
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6c      	ldr	r2, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	4b69      	ldr	r3, [pc, #420]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a68      	ldr	r2, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a65      	ldr	r2, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f918 	bl	80011d0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f914 	bl	80011d0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e207      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xc0>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f904 	bl	80011d0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f900 	bl	80011d0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1f3      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0xe8>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c7      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x244>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f8b9 	bl	80011d0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff f8b5 	bl	80011d0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1a8      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4925      	ldr	r1, [pc, #148]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x244>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f898 	bl	80011d0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff f894 	bl	80011d0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e187      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_RCC_OscConfig+0x248>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f878 	bl	80011d0 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f874 	bl	80011d0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e167      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x240>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x200>
 8002102:	e01b      	b.n	800213c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x248>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff f861 	bl	80011d0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff f85d 	bl	80011d0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e150      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8097 	beq.w	8002278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a7c      	ldr	r2, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b77      	ldr	r3, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a73      	ldr	r2, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff f81d 	bl	80011d0 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff f819 	bl	80011d0 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e10c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x474>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x2ea>
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a63      	ldr	r2, [pc, #396]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x30c>
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x324>
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	4b55      	ldr	r3, [pc, #340]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe ffde 	bl	80011d0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ffda 	bl	80011d0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0cb      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <HAL_RCC_OscConfig+0x334>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe ffc8 	bl	80011d0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe ffc4 	bl	80011d0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0b5      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a1 	beq.w	80023c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d05c      	beq.n	8002348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d141      	bne.n	800231a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x478>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe ff98 	bl	80011d0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ff94 	bl	80011d0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e087      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x478>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe ff6d 	bl	80011d0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe ff69 	bl	80011d0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e05c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x416>
 8002318:	e054      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe ff56 	bl	80011d0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ff52 	bl	80011d0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e045      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x444>
 8002346:	e03d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e038      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000
 800235c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x4ec>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d028      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d121      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	4293      	cmp	r3, r2
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0cc      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d90c      	bls.n	8002410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d044      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	2b03      	cmp	r3, #3
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e067      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4934      	ldr	r1, [pc, #208]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fe84 	bl	80011d0 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fe80 	bl	80011d0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e04f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d20c      	bcs.n	800251c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fde4 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00
 8002590:	40023800 	.word	0x40023800
 8002594:	08004884 	.word	0x08004884
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b094      	sub	sp, #80	; 0x50
 80025a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
 80025ac:	2300      	movs	r3, #0
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	2300      	movs	r3, #0
 80025b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d00d      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x40>
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	f200 80e1 	bhi.w	800278c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x3a>
 80025d2:	e0db      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025d8:	e0db      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b73      	ldr	r3, [pc, #460]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025de:	e0d8      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e0:	4b6f      	ldr	r3, [pc, #444]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
 800260e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	0159      	lsls	r1, r3, #5
 8002620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002624:	0150      	lsls	r0, r2, #5
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4621      	mov	r1, r4
 800262c:	1a51      	subs	r1, r2, r1
 800262e:	6139      	str	r1, [r7, #16]
 8002630:	4629      	mov	r1, r5
 8002632:	eb63 0301 	sbc.w	r3, r3, r1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002644:	4659      	mov	r1, fp
 8002646:	018b      	lsls	r3, r1, #6
 8002648:	4651      	mov	r1, sl
 800264a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800264e:	4651      	mov	r1, sl
 8002650:	018a      	lsls	r2, r1, #6
 8002652:	4651      	mov	r1, sl
 8002654:	ebb2 0801 	subs.w	r8, r2, r1
 8002658:	4659      	mov	r1, fp
 800265a:	eb63 0901 	sbc.w	r9, r3, r1
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800266e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002672:	4690      	mov	r8, r2
 8002674:	4699      	mov	r9, r3
 8002676:	4623      	mov	r3, r4
 8002678:	eb18 0303 	adds.w	r3, r8, r3
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	462b      	mov	r3, r5
 8002680:	eb49 0303 	adc.w	r3, r9, r3
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002692:	4629      	mov	r1, r5
 8002694:	024b      	lsls	r3, r1, #9
 8002696:	4621      	mov	r1, r4
 8002698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800269c:	4621      	mov	r1, r4
 800269e:	024a      	lsls	r2, r1, #9
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	2200      	movs	r2, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b0:	f7fd fde6 	bl	8000280 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026bc:	e058      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	4611      	mov	r1, r2
 80026ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026d8:	4642      	mov	r2, r8
 80026da:	464b      	mov	r3, r9
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	0159      	lsls	r1, r3, #5
 80026e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ea:	0150      	lsls	r0, r2, #5
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4641      	mov	r1, r8
 80026f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f6:	4649      	mov	r1, r9
 80026f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800270c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002710:	ebb2 040a 	subs.w	r4, r2, sl
 8002714:	eb63 050b 	sbc.w	r5, r3, fp
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	00eb      	lsls	r3, r5, #3
 8002722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002726:	00e2      	lsls	r2, r4, #3
 8002728:	4614      	mov	r4, r2
 800272a:	461d      	mov	r5, r3
 800272c:	4643      	mov	r3, r8
 800272e:	18e3      	adds	r3, r4, r3
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	464b      	mov	r3, r9
 8002734:	eb45 0303 	adc.w	r3, r5, r3
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002746:	4629      	mov	r1, r5
 8002748:	028b      	lsls	r3, r1, #10
 800274a:	4621      	mov	r1, r4
 800274c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002750:	4621      	mov	r1, r4
 8002752:	028a      	lsls	r2, r1, #10
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	2200      	movs	r2, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	61fa      	str	r2, [r7, #28]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	f7fd fd8c 	bl	8000280 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002794:	4618      	mov	r0, r3
 8002796:	3750      	adds	r7, #80	; 0x50
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	007a1200 	.word	0x007a1200

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08004894 	.word	0x08004894

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffdc 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	08004894 	.word	0x08004894

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fad4 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fac0 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e041      	b.n	8002948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f839 	bl	8002950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 fa71 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_TIM_PWM_Start+0x24>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e022      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d109      	bne.n	80029a2 <HAL_TIM_PWM_Start+0x3e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e015      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d109      	bne.n	80029bc <HAL_TIM_PWM_Start+0x58>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e008      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e068      	b.n	8002aa8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_PWM_Start+0x82>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	e013      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0x92>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f4:	e00b      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a04:	e003      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fc84 	bl	8003324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <HAL_TIM_PWM_Start+0x14c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d107      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_TIM_PWM_Start+0x14c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x10e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d013      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x10e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_TIM_PWM_Start+0x150>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x10e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_TIM_PWM_Start+0x154>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x10e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIM_PWM_Start+0x158>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x10e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_TIM_PWM_Start+0x15c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d111      	bne.n	8002a96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d010      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	e007      	b.n	8002aa6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40014000 	.word	0x40014000

08002ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0ae      	b.n	8002c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	f200 809f 	bhi.w	8002c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b2d 	.word	0x08002b2d
 8002afc:	08002c31 	.word	0x08002c31
 8002b00:	08002c31 	.word	0x08002c31
 8002b04:	08002c31 	.word	0x08002c31
 8002b08:	08002b6d 	.word	0x08002b6d
 8002b0c:	08002c31 	.word	0x08002c31
 8002b10:	08002c31 	.word	0x08002c31
 8002b14:	08002c31 	.word	0x08002c31
 8002b18:	08002baf 	.word	0x08002baf
 8002b1c:	08002c31 	.word	0x08002c31
 8002b20:	08002c31 	.word	0x08002c31
 8002b24:	08002c31 	.word	0x08002c31
 8002b28:	08002bef 	.word	0x08002bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f9d0 	bl	8002ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0204 	bic.w	r2, r2, #4
 8002b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6999      	ldr	r1, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	619a      	str	r2, [r3, #24]
      break;
 8002b6a:	e064      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fa16 	bl	8002fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6999      	ldr	r1, [r3, #24]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	021a      	lsls	r2, r3, #8
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	619a      	str	r2, [r3, #24]
      break;
 8002bac:	e043      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fa61 	bl	800307c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0208 	orr.w	r2, r2, #8
 8002bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0204 	bic.w	r2, r2, #4
 8002bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69d9      	ldr	r1, [r3, #28]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
      break;
 8002bec:	e023      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 faab 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	021a      	lsls	r2, r3, #8
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	61da      	str	r2, [r3, #28]
      break;
 8002c2e:	e002      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIM_ConfigClockSource+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0b4      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x186>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9c:	d03e      	beq.n	8002d1c <HAL_TIM_ConfigClockSource+0xd4>
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	f200 8087 	bhi.w	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	f000 8086 	beq.w	8002dba <HAL_TIM_ConfigClockSource+0x172>
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d87f      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d01a      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xa6>
 8002cb8:	2b70      	cmp	r3, #112	; 0x70
 8002cba:	d87b      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b60      	cmp	r3, #96	; 0x60
 8002cbe:	d050      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x11a>
 8002cc0:	2b60      	cmp	r3, #96	; 0x60
 8002cc2:	d877      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b50      	cmp	r3, #80	; 0x50
 8002cc6:	d03c      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xfa>
 8002cc8:	2b50      	cmp	r3, #80	; 0x50
 8002cca:	d873      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d058      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x13a>
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d86f      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b30      	cmp	r3, #48	; 0x30
 8002cd6:	d064      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d86b      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d060      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d867      	bhi.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05c      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d05a      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	e062      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f000 faf1 	bl	80032e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	609a      	str	r2, [r3, #8]
      break;
 8002d1a:	e04f      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f000 fada 	bl	80032e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3e:	609a      	str	r2, [r3, #8]
      break;
 8002d40:	e03c      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 fa4e 	bl	80031f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2150      	movs	r1, #80	; 0x50
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 faa7 	bl	80032ae <TIM_ITRx_SetConfig>
      break;
 8002d60:	e02c      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f000 fa6d 	bl	800324e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2160      	movs	r1, #96	; 0x60
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa97 	bl	80032ae <TIM_ITRx_SetConfig>
      break;
 8002d80:	e01c      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 fa2e 	bl	80031f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2140      	movs	r1, #64	; 0x40
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa87 	bl	80032ae <TIM_ITRx_SetConfig>
      break;
 8002da0:	e00c      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 fa7e 	bl	80032ae <TIM_ITRx_SetConfig>
      break;
 8002db2:	e003      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e000      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <TIM_Base_SetConfig+0xe4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0x38>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x38>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <TIM_Base_SetConfig+0xe8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x38>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <TIM_Base_SetConfig+0xec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x38>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <TIM_Base_SetConfig+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <TIM_Base_SetConfig+0xe4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01b      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d017      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <TIM_Base_SetConfig+0xe8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <TIM_Base_SetConfig+0xec>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00f      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <TIM_Base_SetConfig+0xf0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <TIM_Base_SetConfig+0xf4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <TIM_Base_SetConfig+0xf8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <TIM_Base_SetConfig+0xfc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <TIM_Base_SetConfig+0xe4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d103      	bne.n	8002ea8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	615a      	str	r2, [r3, #20]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40000c00 	.word	0x40000c00
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 0302 	bic.w	r3, r3, #2
 8002f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <TIM_OC1_SetConfig+0xc8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10c      	bne.n	8002f4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f023 0308 	bic.w	r3, r3, #8
 8002f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <TIM_OC1_SetConfig+0xc8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d111      	bne.n	8002f7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40010000 	.word	0x40010000

08002fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0210 	bic.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0320 	bic.w	r3, r3, #32
 8002fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <TIM_OC2_SetConfig+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10d      	bne.n	8003020 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a15      	ldr	r2, [pc, #84]	; (8003078 <TIM_OC2_SetConfig+0xd4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d113      	bne.n	8003050 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000

0800307c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d113      	bne.n	8003126 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40010000 	.word	0x40010000

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <TIM_OC4_SetConfig+0x9c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000

080031f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0201 	bic.w	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 030a 	bic.w	r3, r3, #10
 800322c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	031b      	lsls	r3, r3, #12
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f043 0307 	orr.w	r3, r3, #7
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	021a      	lsls	r2, r3, #8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	431a      	orrs	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2201      	movs	r2, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e050      	b.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d013      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10c      	bne.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000

0800344c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e03f      	b.n	80034de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fd fd10 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2224      	movs	r2, #36	; 0x24
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800348e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f829 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b0c0      	sub	sp, #256	; 0x100
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	68d9      	ldr	r1, [r3, #12]
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	ea40 0301 	orr.w	r3, r0, r1
 8003510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003540:	f021 010c 	bic.w	r1, r1, #12
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003562:	6999      	ldr	r1, [r3, #24]
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	ea40 0301 	orr.w	r3, r0, r1
 800356e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b8f      	ldr	r3, [pc, #572]	; (80037b4 <UART_SetConfig+0x2cc>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d005      	beq.n	8003588 <UART_SetConfig+0xa0>
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b8d      	ldr	r3, [pc, #564]	; (80037b8 <UART_SetConfig+0x2d0>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d104      	bne.n	8003592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff f930 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 800358c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003590:	e003      	b.n	800359a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7ff f917 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8003596:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a4:	f040 810c 	bne.w	80037c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035c2:	415b      	adcs	r3, r3
 80035c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035ca:	4621      	mov	r1, r4
 80035cc:	eb12 0801 	adds.w	r8, r2, r1
 80035d0:	4629      	mov	r1, r5
 80035d2:	eb43 0901 	adc.w	r9, r3, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ea:	4690      	mov	r8, r2
 80035ec:	4699      	mov	r9, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	eb18 0303 	adds.w	r3, r8, r3
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035f8:	462b      	mov	r3, r5
 80035fa:	eb49 0303 	adc.w	r3, r9, r3
 80035fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800360e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003616:	460b      	mov	r3, r1
 8003618:	18db      	adds	r3, r3, r3
 800361a:	653b      	str	r3, [r7, #80]	; 0x50
 800361c:	4613      	mov	r3, r2
 800361e:	eb42 0303 	adc.w	r3, r2, r3
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
 8003624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800362c:	f7fc fe28 	bl	8000280 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <UART_SetConfig+0x2d4>)
 8003636:	fba3 2302 	umull	r2, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	011c      	lsls	r4, r3, #4
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003648:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800364c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	64b9      	str	r1, [r7, #72]	; 0x48
 8003658:	415b      	adcs	r3, r3
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800365c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003660:	4641      	mov	r1, r8
 8003662:	eb12 0a01 	adds.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb43 0b01 	adc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003680:	4692      	mov	sl, r2
 8003682:	469b      	mov	fp, r3
 8003684:	4643      	mov	r3, r8
 8003686:	eb1a 0303 	adds.w	r3, sl, r3
 800368a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800368e:	464b      	mov	r3, r9
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ac:	460b      	mov	r3, r1
 80036ae:	18db      	adds	r3, r3, r3
 80036b0:	643b      	str	r3, [r7, #64]	; 0x40
 80036b2:	4613      	mov	r3, r2
 80036b4:	eb42 0303 	adc.w	r3, r2, r3
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036c2:	f7fc fddd 	bl	8000280 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <UART_SetConfig+0x2d4>)
 80036ce:	fba3 2301 	umull	r2, r3, r3, r1
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2264      	movs	r2, #100	; 0x64
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	1acb      	subs	r3, r1, r3
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <UART_SetConfig+0x2d4>)
 80036e4:	fba3 2302 	umull	r2, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f0:	441c      	add	r4, r3
 80036f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	1891      	adds	r1, r2, r2
 800370a:	63b9      	str	r1, [r7, #56]	; 0x38
 800370c:	415b      	adcs	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003714:	4641      	mov	r1, r8
 8003716:	1851      	adds	r1, r2, r1
 8003718:	6339      	str	r1, [r7, #48]	; 0x30
 800371a:	4649      	mov	r1, r9
 800371c:	414b      	adcs	r3, r1
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800372c:	4659      	mov	r1, fp
 800372e:	00cb      	lsls	r3, r1, #3
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003736:	4651      	mov	r1, sl
 8003738:	00ca      	lsls	r2, r1, #3
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	4603      	mov	r3, r0
 8003740:	4642      	mov	r2, r8
 8003742:	189b      	adds	r3, r3, r2
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003748:	464b      	mov	r3, r9
 800374a:	460a      	mov	r2, r1
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003760:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003768:	460b      	mov	r3, r1
 800376a:	18db      	adds	r3, r3, r3
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
 800376e:	4613      	mov	r3, r2
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800377a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800377e:	f7fc fd7f 	bl	8000280 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <UART_SetConfig+0x2d4>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	; 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	3332      	adds	r3, #50	; 0x32
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <UART_SetConfig+0x2d4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 0207 	and.w	r2, r3, #7
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4422      	add	r2, r4
 80037ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b0:	e106      	b.n	80039c0 <UART_SetConfig+0x4d8>
 80037b2:	bf00      	nop
 80037b4:	40011000 	.word	0x40011000
 80037b8:	40011400 	.word	0x40011400
 80037bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	6239      	str	r1, [r7, #32]
 80037da:	415b      	adcs	r3, r3
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037e2:	4641      	mov	r1, r8
 80037e4:	1854      	adds	r4, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb43 0501 	adc.w	r5, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	00eb      	lsls	r3, r5, #3
 80037f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	4643      	mov	r3, r8
 8003802:	18e3      	adds	r3, r4, r3
 8003804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003808:	464b      	mov	r3, r9
 800380a:	eb45 0303 	adc.w	r3, r5, r3
 800380e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800381e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800382e:	4629      	mov	r1, r5
 8003830:	008b      	lsls	r3, r1, #2
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003838:	4621      	mov	r1, r4
 800383a:	008a      	lsls	r2, r1, #2
 800383c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003840:	f7fc fd1e 	bl	8000280 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b60      	ldr	r3, [pc, #384]	; (80039cc <UART_SetConfig+0x4e4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800385c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	61b9      	str	r1, [r7, #24]
 800386c:	415b      	adcs	r3, r3
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6139      	str	r1, [r7, #16]
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038cc:	4649      	mov	r1, r9
 80038ce:	008b      	lsls	r3, r1, #2
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d6:	4641      	mov	r1, r8
 80038d8:	008a      	lsls	r2, r1, #2
 80038da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038de:	f7fc fccf 	bl	8000280 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	4b38      	ldr	r3, [pc, #224]	; (80039cc <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2301 	umull	r2, r3, r3, r1
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2264      	movs	r2, #100	; 0x64
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	1acb      	subs	r3, r1, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	; 0x32
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <UART_SetConfig+0x4e4>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003908:	441c      	add	r4, r3
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	673b      	str	r3, [r7, #112]	; 0x70
 8003912:	677a      	str	r2, [r7, #116]	; 0x74
 8003914:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	415b      	adcs	r3, r3
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	66bb      	str	r3, [r7, #104]	; 0x68
 800395a:	464b      	mov	r3, r9
 800395c:	460a      	mov	r2, r1
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	663b      	str	r3, [r7, #96]	; 0x60
 800396e:	667a      	str	r2, [r7, #100]	; 0x64
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800397c:	4649      	mov	r1, r9
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003986:	4641      	mov	r1, r8
 8003988:	008a      	lsls	r2, r1, #2
 800398a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800398e:	f7fc fc77 	bl	8000280 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <UART_SetConfig+0x4e4>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a08      	ldr	r2, [pc, #32]	; (80039cc <UART_SetConfig+0x4e4>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4422      	add	r2, r4
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039c6:	46bd      	mov	sp, r7
 80039c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039cc:	51eb851f 	.word	0x51eb851f

080039d0 <std>:
 80039d0:	2300      	movs	r3, #0
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
 80039d6:	e9c0 3300 	strd	r3, r3, [r0]
 80039da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039de:	6083      	str	r3, [r0, #8]
 80039e0:	8181      	strh	r1, [r0, #12]
 80039e2:	6643      	str	r3, [r0, #100]	; 0x64
 80039e4:	81c2      	strh	r2, [r0, #14]
 80039e6:	6183      	str	r3, [r0, #24]
 80039e8:	4619      	mov	r1, r3
 80039ea:	2208      	movs	r2, #8
 80039ec:	305c      	adds	r0, #92	; 0x5c
 80039ee:	f000 f906 	bl	8003bfe <memset>
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <std+0x58>)
 80039f4:	6263      	str	r3, [r4, #36]	; 0x24
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <std+0x5c>)
 80039f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <std+0x60>)
 80039fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <std+0x64>)
 8003a00:	6323      	str	r3, [r4, #48]	; 0x30
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <std+0x68>)
 8003a04:	6224      	str	r4, [r4, #32]
 8003a06:	429c      	cmp	r4, r3
 8003a08:	d006      	beq.n	8003a18 <std+0x48>
 8003a0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003a0e:	4294      	cmp	r4, r2
 8003a10:	d002      	beq.n	8003a18 <std+0x48>
 8003a12:	33d0      	adds	r3, #208	; 0xd0
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d105      	bne.n	8003a24 <std+0x54>
 8003a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a20:	f000 b966 	b.w	8003cf0 <__retarget_lock_init_recursive>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	bf00      	nop
 8003a28:	08003b79 	.word	0x08003b79
 8003a2c:	08003b9b 	.word	0x08003b9b
 8003a30:	08003bd3 	.word	0x08003bd3
 8003a34:	08003bf7 	.word	0x08003bf7
 8003a38:	20000160 	.word	0x20000160

08003a3c <stdio_exit_handler>:
 8003a3c:	4a02      	ldr	r2, [pc, #8]	; (8003a48 <stdio_exit_handler+0xc>)
 8003a3e:	4903      	ldr	r1, [pc, #12]	; (8003a4c <stdio_exit_handler+0x10>)
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <stdio_exit_handler+0x14>)
 8003a42:	f000 b869 	b.w	8003b18 <_fwalk_sglue>
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	0800459d 	.word	0x0800459d
 8003a50:	20000018 	.word	0x20000018

08003a54 <cleanup_stdio>:
 8003a54:	6841      	ldr	r1, [r0, #4]
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <cleanup_stdio+0x34>)
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	d001      	beq.n	8003a64 <cleanup_stdio+0x10>
 8003a60:	f000 fd9c 	bl	800459c <_fflush_r>
 8003a64:	68a1      	ldr	r1, [r4, #8]
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <cleanup_stdio+0x38>)
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <cleanup_stdio+0x1e>
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f000 fd95 	bl	800459c <_fflush_r>
 8003a72:	68e1      	ldr	r1, [r4, #12]
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <cleanup_stdio+0x3c>)
 8003a76:	4299      	cmp	r1, r3
 8003a78:	d004      	beq.n	8003a84 <cleanup_stdio+0x30>
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	f000 bd8c 	b.w	800459c <_fflush_r>
 8003a84:	bd10      	pop	{r4, pc}
 8003a86:	bf00      	nop
 8003a88:	20000160 	.word	0x20000160
 8003a8c:	200001c8 	.word	0x200001c8
 8003a90:	20000230 	.word	0x20000230

08003a94 <global_stdio_init.part.0>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <global_stdio_init.part.0+0x30>)
 8003a98:	4c0b      	ldr	r4, [pc, #44]	; (8003ac8 <global_stdio_init.part.0+0x34>)
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <global_stdio_init.part.0+0x38>)
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	f7ff ff94 	bl	80039d0 <std>
 8003aa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003aac:	2201      	movs	r2, #1
 8003aae:	2109      	movs	r1, #9
 8003ab0:	f7ff ff8e 	bl	80039d0 <std>
 8003ab4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ab8:	2202      	movs	r2, #2
 8003aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003abe:	2112      	movs	r1, #18
 8003ac0:	f7ff bf86 	b.w	80039d0 <std>
 8003ac4:	20000298 	.word	0x20000298
 8003ac8:	20000160 	.word	0x20000160
 8003acc:	08003a3d 	.word	0x08003a3d

08003ad0 <__sfp_lock_acquire>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__sfp_lock_acquire+0x8>)
 8003ad2:	f000 b90e 	b.w	8003cf2 <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	200002a1 	.word	0x200002a1

08003adc <__sfp_lock_release>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__sfp_lock_release+0x8>)
 8003ade:	f000 b909 	b.w	8003cf4 <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	200002a1 	.word	0x200002a1

08003ae8 <__sinit>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	f7ff fff0 	bl	8003ad0 <__sfp_lock_acquire>
 8003af0:	6a23      	ldr	r3, [r4, #32]
 8003af2:	b11b      	cbz	r3, 8003afc <__sinit+0x14>
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f7ff bff0 	b.w	8003adc <__sfp_lock_release>
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <__sinit+0x28>)
 8003afe:	6223      	str	r3, [r4, #32]
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <__sinit+0x2c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f5      	bne.n	8003af4 <__sinit+0xc>
 8003b08:	f7ff ffc4 	bl	8003a94 <global_stdio_init.part.0>
 8003b0c:	e7f2      	b.n	8003af4 <__sinit+0xc>
 8003b0e:	bf00      	nop
 8003b10:	08003a55 	.word	0x08003a55
 8003b14:	20000298 	.word	0x20000298

08003b18 <_fwalk_sglue>:
 8003b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	4688      	mov	r8, r1
 8003b20:	4614      	mov	r4, r2
 8003b22:	2600      	movs	r6, #0
 8003b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b28:	f1b9 0901 	subs.w	r9, r9, #1
 8003b2c:	d505      	bpl.n	8003b3a <_fwalk_sglue+0x22>
 8003b2e:	6824      	ldr	r4, [r4, #0]
 8003b30:	2c00      	cmp	r4, #0
 8003b32:	d1f7      	bne.n	8003b24 <_fwalk_sglue+0xc>
 8003b34:	4630      	mov	r0, r6
 8003b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b3a:	89ab      	ldrh	r3, [r5, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d907      	bls.n	8003b50 <_fwalk_sglue+0x38>
 8003b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b44:	3301      	adds	r3, #1
 8003b46:	d003      	beq.n	8003b50 <_fwalk_sglue+0x38>
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	4306      	orrs	r6, r0
 8003b50:	3568      	adds	r5, #104	; 0x68
 8003b52:	e7e9      	b.n	8003b28 <_fwalk_sglue+0x10>

08003b54 <iprintf>:
 8003b54:	b40f      	push	{r0, r1, r2, r3}
 8003b56:	b507      	push	{r0, r1, r2, lr}
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <iprintf+0x20>)
 8003b5a:	ab04      	add	r3, sp, #16
 8003b5c:	6808      	ldr	r0, [r1, #0]
 8003b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b62:	6881      	ldr	r1, [r0, #8]
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	f000 f9e9 	bl	8003f3c <_vfiprintf_r>
 8003b6a:	b003      	add	sp, #12
 8003b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b70:	b004      	add	sp, #16
 8003b72:	4770      	bx	lr
 8003b74:	20000064 	.word	0x20000064

08003b78 <__sread>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b80:	f000 f868 	bl	8003c54 <_read_r>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	bfab      	itete	ge
 8003b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b8c:	181b      	addge	r3, r3, r0
 8003b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b92:	bfac      	ite	ge
 8003b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b96:	81a3      	strhlt	r3, [r4, #12]
 8003b98:	bd10      	pop	{r4, pc}

08003b9a <__swrite>:
 8003b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9e:	461f      	mov	r7, r3
 8003ba0:	898b      	ldrh	r3, [r1, #12]
 8003ba2:	05db      	lsls	r3, r3, #23
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4616      	mov	r6, r2
 8003baa:	d505      	bpl.n	8003bb8 <__swrite+0x1e>
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f000 f83c 	bl	8003c30 <_lseek_r>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	463b      	mov	r3, r7
 8003bc8:	4628      	mov	r0, r5
 8003bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	f000 b853 	b.w	8003c78 <_write_r>

08003bd2 <__sseek>:
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bda:	f000 f829 	bl	8003c30 <_lseek_r>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	bf15      	itete	ne
 8003be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bee:	81a3      	strheq	r3, [r4, #12]
 8003bf0:	bf18      	it	ne
 8003bf2:	81a3      	strhne	r3, [r4, #12]
 8003bf4:	bd10      	pop	{r4, pc}

08003bf6 <__sclose>:
 8003bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfa:	f000 b809 	b.w	8003c10 <_close_r>

08003bfe <memset>:
 8003bfe:	4402      	add	r2, r0
 8003c00:	4603      	mov	r3, r0
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d100      	bne.n	8003c08 <memset+0xa>
 8003c06:	4770      	bx	lr
 8003c08:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0c:	e7f9      	b.n	8003c02 <memset+0x4>
	...

08003c10 <_close_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d06      	ldr	r5, [pc, #24]	; (8003c2c <_close_r+0x1c>)
 8003c14:	2300      	movs	r3, #0
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fd f9cb 	bl	8000fb6 <_close>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_close_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_close_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	2000029c 	.word	0x2000029c

08003c30 <_lseek_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d07      	ldr	r5, [pc, #28]	; (8003c50 <_lseek_r+0x20>)
 8003c34:	4604      	mov	r4, r0
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	602a      	str	r2, [r5, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fd f9e0 	bl	8001004 <_lseek>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_lseek_r+0x1e>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_lseek_r+0x1e>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	2000029c 	.word	0x2000029c

08003c54 <_read_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d07      	ldr	r5, [pc, #28]	; (8003c74 <_read_r+0x20>)
 8003c58:	4604      	mov	r4, r0
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	602a      	str	r2, [r5, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7fd f98a 	bl	8000f7c <_read>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_read_r+0x1e>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_read_r+0x1e>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	2000029c 	.word	0x2000029c

08003c78 <_write_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d07      	ldr	r5, [pc, #28]	; (8003c98 <_write_r+0x20>)
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7fd f804 	bl	8000c94 <_write>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_write_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_write_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	2000029c 	.word	0x2000029c

08003c9c <__errno>:
 8003c9c:	4b01      	ldr	r3, [pc, #4]	; (8003ca4 <__errno+0x8>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000064 	.word	0x20000064

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4d0d      	ldr	r5, [pc, #52]	; (8003ce0 <__libc_init_array+0x38>)
 8003cac:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cae:	1b64      	subs	r4, r4, r5
 8003cb0:	10a4      	asrs	r4, r4, #2
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	4d0b      	ldr	r5, [pc, #44]	; (8003ce8 <__libc_init_array+0x40>)
 8003cba:	4c0c      	ldr	r4, [pc, #48]	; (8003cec <__libc_init_array+0x44>)
 8003cbc:	f000 fdc0 	bl	8004840 <_init>
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	080048d8 	.word	0x080048d8
 8003ce4:	080048d8 	.word	0x080048d8
 8003ce8:	080048d8 	.word	0x080048d8
 8003cec:	080048dc 	.word	0x080048dc

08003cf0 <__retarget_lock_init_recursive>:
 8003cf0:	4770      	bx	lr

08003cf2 <__retarget_lock_acquire_recursive>:
 8003cf2:	4770      	bx	lr

08003cf4 <__retarget_lock_release_recursive>:
 8003cf4:	4770      	bx	lr
	...

08003cf8 <_free_r>:
 8003cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cfa:	2900      	cmp	r1, #0
 8003cfc:	d044      	beq.n	8003d88 <_free_r+0x90>
 8003cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d02:	9001      	str	r0, [sp, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f1a1 0404 	sub.w	r4, r1, #4
 8003d0a:	bfb8      	it	lt
 8003d0c:	18e4      	addlt	r4, r4, r3
 8003d0e:	f000 f8df 	bl	8003ed0 <__malloc_lock>
 8003d12:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <_free_r+0x94>)
 8003d14:	9801      	ldr	r0, [sp, #4]
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	b933      	cbnz	r3, 8003d28 <_free_r+0x30>
 8003d1a:	6063      	str	r3, [r4, #4]
 8003d1c:	6014      	str	r4, [r2, #0]
 8003d1e:	b003      	add	sp, #12
 8003d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d24:	f000 b8da 	b.w	8003edc <__malloc_unlock>
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	d908      	bls.n	8003d3e <_free_r+0x46>
 8003d2c:	6825      	ldr	r5, [r4, #0]
 8003d2e:	1961      	adds	r1, r4, r5
 8003d30:	428b      	cmp	r3, r1
 8003d32:	bf01      	itttt	eq
 8003d34:	6819      	ldreq	r1, [r3, #0]
 8003d36:	685b      	ldreq	r3, [r3, #4]
 8003d38:	1949      	addeq	r1, r1, r5
 8003d3a:	6021      	streq	r1, [r4, #0]
 8003d3c:	e7ed      	b.n	8003d1a <_free_r+0x22>
 8003d3e:	461a      	mov	r2, r3
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b10b      	cbz	r3, 8003d48 <_free_r+0x50>
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	d9fa      	bls.n	8003d3e <_free_r+0x46>
 8003d48:	6811      	ldr	r1, [r2, #0]
 8003d4a:	1855      	adds	r5, r2, r1
 8003d4c:	42a5      	cmp	r5, r4
 8003d4e:	d10b      	bne.n	8003d68 <_free_r+0x70>
 8003d50:	6824      	ldr	r4, [r4, #0]
 8003d52:	4421      	add	r1, r4
 8003d54:	1854      	adds	r4, r2, r1
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	d1e0      	bne.n	8003d1e <_free_r+0x26>
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6053      	str	r3, [r2, #4]
 8003d62:	440c      	add	r4, r1
 8003d64:	6014      	str	r4, [r2, #0]
 8003d66:	e7da      	b.n	8003d1e <_free_r+0x26>
 8003d68:	d902      	bls.n	8003d70 <_free_r+0x78>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	6003      	str	r3, [r0, #0]
 8003d6e:	e7d6      	b.n	8003d1e <_free_r+0x26>
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	1961      	adds	r1, r4, r5
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf04      	itt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	bf04      	itt	eq
 8003d80:	1949      	addeq	r1, r1, r5
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	6054      	str	r4, [r2, #4]
 8003d86:	e7ca      	b.n	8003d1e <_free_r+0x26>
 8003d88:	b003      	add	sp, #12
 8003d8a:	bd30      	pop	{r4, r5, pc}
 8003d8c:	200002a4 	.word	0x200002a4

08003d90 <sbrk_aligned>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4e0e      	ldr	r6, [pc, #56]	; (8003dcc <sbrk_aligned+0x3c>)
 8003d94:	460c      	mov	r4, r1
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b911      	cbnz	r1, 8003da2 <sbrk_aligned+0x12>
 8003d9c:	f000 fcbc 	bl	8004718 <_sbrk_r>
 8003da0:	6030      	str	r0, [r6, #0]
 8003da2:	4621      	mov	r1, r4
 8003da4:	4628      	mov	r0, r5
 8003da6:	f000 fcb7 	bl	8004718 <_sbrk_r>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <sbrk_aligned+0x34>
 8003dae:	1cc4      	adds	r4, r0, #3
 8003db0:	f024 0403 	bic.w	r4, r4, #3
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d007      	beq.n	8003dc8 <sbrk_aligned+0x38>
 8003db8:	1a21      	subs	r1, r4, r0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fcac 	bl	8004718 <_sbrk_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d101      	bne.n	8003dc8 <sbrk_aligned+0x38>
 8003dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	200002a8 	.word	0x200002a8

08003dd0 <_malloc_r>:
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	1ccd      	adds	r5, r1, #3
 8003dd6:	f025 0503 	bic.w	r5, r5, #3
 8003dda:	3508      	adds	r5, #8
 8003ddc:	2d0c      	cmp	r5, #12
 8003dde:	bf38      	it	cc
 8003de0:	250c      	movcc	r5, #12
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	4607      	mov	r7, r0
 8003de6:	db01      	blt.n	8003dec <_malloc_r+0x1c>
 8003de8:	42a9      	cmp	r1, r5
 8003dea:	d905      	bls.n	8003df8 <_malloc_r+0x28>
 8003dec:	230c      	movs	r3, #12
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	2600      	movs	r6, #0
 8003df2:	4630      	mov	r0, r6
 8003df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ecc <_malloc_r+0xfc>
 8003dfc:	f000 f868 	bl	8003ed0 <__malloc_lock>
 8003e00:	f8d8 3000 	ldr.w	r3, [r8]
 8003e04:	461c      	mov	r4, r3
 8003e06:	bb5c      	cbnz	r4, 8003e60 <_malloc_r+0x90>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ffc0 	bl	8003d90 <sbrk_aligned>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	4604      	mov	r4, r0
 8003e14:	d155      	bne.n	8003ec2 <_malloc_r+0xf2>
 8003e16:	f8d8 4000 	ldr.w	r4, [r8]
 8003e1a:	4626      	mov	r6, r4
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	d145      	bne.n	8003eac <_malloc_r+0xdc>
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d048      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	4631      	mov	r1, r6
 8003e28:	4638      	mov	r0, r7
 8003e2a:	eb04 0903 	add.w	r9, r4, r3
 8003e2e:	f000 fc73 	bl	8004718 <_sbrk_r>
 8003e32:	4581      	cmp	r9, r0
 8003e34:	d13f      	bne.n	8003eb6 <_malloc_r+0xe6>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	1a6d      	subs	r5, r5, r1
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff ffa7 	bl	8003d90 <sbrk_aligned>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d037      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	442b      	add	r3, r5
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d038      	beq.n	8003ec6 <_malloc_r+0xf6>
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d12b      	bne.n	8003eb2 <_malloc_r+0xe2>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xb0>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d41f      	bmi.n	8003ea6 <_malloc_r+0xd6>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xca>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4638      	mov	r0, r7
 8003e82:	f104 060b 	add.w	r6, r4, #11
 8003e86:	f000 f829 	bl	8003edc <__malloc_unlock>
 8003e8a:	f026 0607 	bic.w	r6, r6, #7
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	1af2      	subs	r2, r6, r3
 8003e92:	d0ae      	beq.n	8003df2 <_malloc_r+0x22>
 8003e94:	1b9b      	subs	r3, r3, r6
 8003e96:	50a3      	str	r3, [r4, r2]
 8003e98:	e7ab      	b.n	8003df2 <_malloc_r+0x22>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x8c>
 8003ea0:	f8c8 2000 	str.w	r2, [r8]
 8003ea4:	e7ec      	b.n	8003e80 <_malloc_r+0xb0>
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	6864      	ldr	r4, [r4, #4]
 8003eaa:	e7ac      	b.n	8003e06 <_malloc_r+0x36>
 8003eac:	4634      	mov	r4, r6
 8003eae:	6876      	ldr	r6, [r6, #4]
 8003eb0:	e7b4      	b.n	8003e1c <_malloc_r+0x4c>
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	e7cc      	b.n	8003e50 <_malloc_r+0x80>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f000 f80e 	bl	8003edc <__malloc_unlock>
 8003ec0:	e797      	b.n	8003df2 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7dc      	b.n	8003e80 <_malloc_r+0xb0>
 8003ec6:	605b      	str	r3, [r3, #4]
 8003ec8:	deff      	udf	#255	; 0xff
 8003eca:	bf00      	nop
 8003ecc:	200002a4 	.word	0x200002a4

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f7ff bf0e 	b.w	8003cf2 <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	200002a0 	.word	0x200002a0

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f7ff bf09 	b.w	8003cf4 <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200002a0 	.word	0x200002a0

08003ee8 <__sfputc_r>:
 8003ee8:	6893      	ldr	r3, [r2, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	b410      	push	{r4}
 8003ef0:	6093      	str	r3, [r2, #8]
 8003ef2:	da08      	bge.n	8003f06 <__sfputc_r+0x1e>
 8003ef4:	6994      	ldr	r4, [r2, #24]
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	db01      	blt.n	8003efe <__sfputc_r+0x16>
 8003efa:	290a      	cmp	r1, #10
 8003efc:	d103      	bne.n	8003f06 <__sfputc_r+0x1e>
 8003efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f02:	f000 bb73 	b.w	80045ec <__swbuf_r>
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	1c58      	adds	r0, r3, #1
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	7019      	strb	r1, [r3, #0]
 8003f0e:	4608      	mov	r0, r1
 8003f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <__sfputs_r>:
 8003f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f18:	4606      	mov	r6, r0
 8003f1a:	460f      	mov	r7, r1
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	18d5      	adds	r5, r2, r3
 8003f20:	42ac      	cmp	r4, r5
 8003f22:	d101      	bne.n	8003f28 <__sfputs_r+0x12>
 8003f24:	2000      	movs	r0, #0
 8003f26:	e007      	b.n	8003f38 <__sfputs_r+0x22>
 8003f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2c:	463a      	mov	r2, r7
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7ff ffda 	bl	8003ee8 <__sfputc_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d1f3      	bne.n	8003f20 <__sfputs_r+0xa>
 8003f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f3c <_vfiprintf_r>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	460d      	mov	r5, r1
 8003f42:	b09d      	sub	sp, #116	; 0x74
 8003f44:	4614      	mov	r4, r2
 8003f46:	4698      	mov	r8, r3
 8003f48:	4606      	mov	r6, r0
 8003f4a:	b118      	cbz	r0, 8003f54 <_vfiprintf_r+0x18>
 8003f4c:	6a03      	ldr	r3, [r0, #32]
 8003f4e:	b90b      	cbnz	r3, 8003f54 <_vfiprintf_r+0x18>
 8003f50:	f7ff fdca 	bl	8003ae8 <__sinit>
 8003f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f56:	07d9      	lsls	r1, r3, #31
 8003f58:	d405      	bmi.n	8003f66 <_vfiprintf_r+0x2a>
 8003f5a:	89ab      	ldrh	r3, [r5, #12]
 8003f5c:	059a      	lsls	r2, r3, #22
 8003f5e:	d402      	bmi.n	8003f66 <_vfiprintf_r+0x2a>
 8003f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f62:	f7ff fec6 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003f66:	89ab      	ldrh	r3, [r5, #12]
 8003f68:	071b      	lsls	r3, r3, #28
 8003f6a:	d501      	bpl.n	8003f70 <_vfiprintf_r+0x34>
 8003f6c:	692b      	ldr	r3, [r5, #16]
 8003f6e:	b99b      	cbnz	r3, 8003f98 <_vfiprintf_r+0x5c>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4630      	mov	r0, r6
 8003f74:	f000 fb78 	bl	8004668 <__swsetup_r>
 8003f78:	b170      	cbz	r0, 8003f98 <_vfiprintf_r+0x5c>
 8003f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f7c:	07dc      	lsls	r4, r3, #31
 8003f7e:	d504      	bpl.n	8003f8a <_vfiprintf_r+0x4e>
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	b01d      	add	sp, #116	; 0x74
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	89ab      	ldrh	r3, [r5, #12]
 8003f8c:	0598      	lsls	r0, r3, #22
 8003f8e:	d4f7      	bmi.n	8003f80 <_vfiprintf_r+0x44>
 8003f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f92:	f7ff feaf 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003f96:	e7f3      	b.n	8003f80 <_vfiprintf_r+0x44>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fa6:	2330      	movs	r3, #48	; 0x30
 8003fa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800415c <_vfiprintf_r+0x220>
 8003fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fb0:	f04f 0901 	mov.w	r9, #1
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	469a      	mov	sl, r3
 8003fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fbc:	b10a      	cbz	r2, 8003fc2 <_vfiprintf_r+0x86>
 8003fbe:	2a25      	cmp	r2, #37	; 0x25
 8003fc0:	d1f9      	bne.n	8003fb6 <_vfiprintf_r+0x7a>
 8003fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc6:	d00b      	beq.n	8003fe0 <_vfiprintf_r+0xa4>
 8003fc8:	465b      	mov	r3, fp
 8003fca:	4622      	mov	r2, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff ffa1 	bl	8003f16 <__sfputs_r>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	f000 80a9 	beq.w	800412c <_vfiprintf_r+0x1f0>
 8003fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fdc:	445a      	add	r2, fp
 8003fde:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a1 	beq.w	800412c <_vfiprintf_r+0x1f0>
 8003fea:	2300      	movs	r3, #0
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ff4:	f10a 0a01 	add.w	sl, sl, #1
 8003ff8:	9304      	str	r3, [sp, #16]
 8003ffa:	9307      	str	r3, [sp, #28]
 8003ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004000:	931a      	str	r3, [sp, #104]	; 0x68
 8004002:	4654      	mov	r4, sl
 8004004:	2205      	movs	r2, #5
 8004006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400a:	4854      	ldr	r0, [pc, #336]	; (800415c <_vfiprintf_r+0x220>)
 800400c:	f7fc f8e8 	bl	80001e0 <memchr>
 8004010:	9a04      	ldr	r2, [sp, #16]
 8004012:	b9d8      	cbnz	r0, 800404c <_vfiprintf_r+0x110>
 8004014:	06d1      	lsls	r1, r2, #27
 8004016:	bf44      	itt	mi
 8004018:	2320      	movmi	r3, #32
 800401a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800401e:	0713      	lsls	r3, r2, #28
 8004020:	bf44      	itt	mi
 8004022:	232b      	movmi	r3, #43	; 0x2b
 8004024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004028:	f89a 3000 	ldrb.w	r3, [sl]
 800402c:	2b2a      	cmp	r3, #42	; 0x2a
 800402e:	d015      	beq.n	800405c <_vfiprintf_r+0x120>
 8004030:	9a07      	ldr	r2, [sp, #28]
 8004032:	4654      	mov	r4, sl
 8004034:	2000      	movs	r0, #0
 8004036:	f04f 0c0a 	mov.w	ip, #10
 800403a:	4621      	mov	r1, r4
 800403c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004040:	3b30      	subs	r3, #48	; 0x30
 8004042:	2b09      	cmp	r3, #9
 8004044:	d94d      	bls.n	80040e2 <_vfiprintf_r+0x1a6>
 8004046:	b1b0      	cbz	r0, 8004076 <_vfiprintf_r+0x13a>
 8004048:	9207      	str	r2, [sp, #28]
 800404a:	e014      	b.n	8004076 <_vfiprintf_r+0x13a>
 800404c:	eba0 0308 	sub.w	r3, r0, r8
 8004050:	fa09 f303 	lsl.w	r3, r9, r3
 8004054:	4313      	orrs	r3, r2
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	46a2      	mov	sl, r4
 800405a:	e7d2      	b.n	8004002 <_vfiprintf_r+0xc6>
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	1d19      	adds	r1, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	9103      	str	r1, [sp, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	bfbb      	ittet	lt
 8004068:	425b      	neglt	r3, r3
 800406a:	f042 0202 	orrlt.w	r2, r2, #2
 800406e:	9307      	strge	r3, [sp, #28]
 8004070:	9307      	strlt	r3, [sp, #28]
 8004072:	bfb8      	it	lt
 8004074:	9204      	strlt	r2, [sp, #16]
 8004076:	7823      	ldrb	r3, [r4, #0]
 8004078:	2b2e      	cmp	r3, #46	; 0x2e
 800407a:	d10c      	bne.n	8004096 <_vfiprintf_r+0x15a>
 800407c:	7863      	ldrb	r3, [r4, #1]
 800407e:	2b2a      	cmp	r3, #42	; 0x2a
 8004080:	d134      	bne.n	80040ec <_vfiprintf_r+0x1b0>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	1d1a      	adds	r2, r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	9203      	str	r2, [sp, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfb8      	it	lt
 800408e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004092:	3402      	adds	r4, #2
 8004094:	9305      	str	r3, [sp, #20]
 8004096:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800416c <_vfiprintf_r+0x230>
 800409a:	7821      	ldrb	r1, [r4, #0]
 800409c:	2203      	movs	r2, #3
 800409e:	4650      	mov	r0, sl
 80040a0:	f7fc f89e 	bl	80001e0 <memchr>
 80040a4:	b138      	cbz	r0, 80040b6 <_vfiprintf_r+0x17a>
 80040a6:	9b04      	ldr	r3, [sp, #16]
 80040a8:	eba0 000a 	sub.w	r0, r0, sl
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	4082      	lsls	r2, r0
 80040b0:	4313      	orrs	r3, r2
 80040b2:	3401      	adds	r4, #1
 80040b4:	9304      	str	r3, [sp, #16]
 80040b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ba:	4829      	ldr	r0, [pc, #164]	; (8004160 <_vfiprintf_r+0x224>)
 80040bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040c0:	2206      	movs	r2, #6
 80040c2:	f7fc f88d 	bl	80001e0 <memchr>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d03f      	beq.n	800414a <_vfiprintf_r+0x20e>
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <_vfiprintf_r+0x228>)
 80040cc:	bb1b      	cbnz	r3, 8004116 <_vfiprintf_r+0x1da>
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	3307      	adds	r3, #7
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	3308      	adds	r3, #8
 80040d8:	9303      	str	r3, [sp, #12]
 80040da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040dc:	443b      	add	r3, r7
 80040de:	9309      	str	r3, [sp, #36]	; 0x24
 80040e0:	e768      	b.n	8003fb4 <_vfiprintf_r+0x78>
 80040e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040e6:	460c      	mov	r4, r1
 80040e8:	2001      	movs	r0, #1
 80040ea:	e7a6      	b.n	800403a <_vfiprintf_r+0xfe>
 80040ec:	2300      	movs	r3, #0
 80040ee:	3401      	adds	r4, #1
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	4619      	mov	r1, r3
 80040f4:	f04f 0c0a 	mov.w	ip, #10
 80040f8:	4620      	mov	r0, r4
 80040fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040fe:	3a30      	subs	r2, #48	; 0x30
 8004100:	2a09      	cmp	r2, #9
 8004102:	d903      	bls.n	800410c <_vfiprintf_r+0x1d0>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0c6      	beq.n	8004096 <_vfiprintf_r+0x15a>
 8004108:	9105      	str	r1, [sp, #20]
 800410a:	e7c4      	b.n	8004096 <_vfiprintf_r+0x15a>
 800410c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004110:	4604      	mov	r4, r0
 8004112:	2301      	movs	r3, #1
 8004114:	e7f0      	b.n	80040f8 <_vfiprintf_r+0x1bc>
 8004116:	ab03      	add	r3, sp, #12
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	462a      	mov	r2, r5
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <_vfiprintf_r+0x22c>)
 800411e:	a904      	add	r1, sp, #16
 8004120:	4630      	mov	r0, r6
 8004122:	f3af 8000 	nop.w
 8004126:	4607      	mov	r7, r0
 8004128:	1c78      	adds	r0, r7, #1
 800412a:	d1d6      	bne.n	80040da <_vfiprintf_r+0x19e>
 800412c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800412e:	07d9      	lsls	r1, r3, #31
 8004130:	d405      	bmi.n	800413e <_vfiprintf_r+0x202>
 8004132:	89ab      	ldrh	r3, [r5, #12]
 8004134:	059a      	lsls	r2, r3, #22
 8004136:	d402      	bmi.n	800413e <_vfiprintf_r+0x202>
 8004138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800413a:	f7ff fddb 	bl	8003cf4 <__retarget_lock_release_recursive>
 800413e:	89ab      	ldrh	r3, [r5, #12]
 8004140:	065b      	lsls	r3, r3, #25
 8004142:	f53f af1d 	bmi.w	8003f80 <_vfiprintf_r+0x44>
 8004146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004148:	e71c      	b.n	8003f84 <_vfiprintf_r+0x48>
 800414a:	ab03      	add	r3, sp, #12
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	462a      	mov	r2, r5
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <_vfiprintf_r+0x22c>)
 8004152:	a904      	add	r1, sp, #16
 8004154:	4630      	mov	r0, r6
 8004156:	f000 f879 	bl	800424c <_printf_i>
 800415a:	e7e4      	b.n	8004126 <_vfiprintf_r+0x1ea>
 800415c:	0800489c 	.word	0x0800489c
 8004160:	080048a6 	.word	0x080048a6
 8004164:	00000000 	.word	0x00000000
 8004168:	08003f17 	.word	0x08003f17
 800416c:	080048a2 	.word	0x080048a2

08004170 <_printf_common>:
 8004170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	4616      	mov	r6, r2
 8004176:	4699      	mov	r9, r3
 8004178:	688a      	ldr	r2, [r1, #8]
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004180:	4293      	cmp	r3, r2
 8004182:	bfb8      	it	lt
 8004184:	4613      	movlt	r3, r2
 8004186:	6033      	str	r3, [r6, #0]
 8004188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800418c:	4607      	mov	r7, r0
 800418e:	460c      	mov	r4, r1
 8004190:	b10a      	cbz	r2, 8004196 <_printf_common+0x26>
 8004192:	3301      	adds	r3, #1
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	0699      	lsls	r1, r3, #26
 800419a:	bf42      	ittt	mi
 800419c:	6833      	ldrmi	r3, [r6, #0]
 800419e:	3302      	addmi	r3, #2
 80041a0:	6033      	strmi	r3, [r6, #0]
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	f015 0506 	ands.w	r5, r5, #6
 80041a8:	d106      	bne.n	80041b8 <_printf_common+0x48>
 80041aa:	f104 0a19 	add.w	sl, r4, #25
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	6832      	ldr	r2, [r6, #0]
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	42ab      	cmp	r3, r5
 80041b6:	dc26      	bgt.n	8004206 <_printf_common+0x96>
 80041b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041bc:	1e13      	subs	r3, r2, #0
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	bf18      	it	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	0692      	lsls	r2, r2, #26
 80041c6:	d42b      	bmi.n	8004220 <_printf_common+0xb0>
 80041c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d01e      	beq.n	8004214 <_printf_common+0xa4>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	f003 0306 	and.w	r3, r3, #6
 80041de:	2b04      	cmp	r3, #4
 80041e0:	bf02      	ittt	eq
 80041e2:	68e5      	ldreq	r5, [r4, #12]
 80041e4:	6833      	ldreq	r3, [r6, #0]
 80041e6:	1aed      	subeq	r5, r5, r3
 80041e8:	68a3      	ldr	r3, [r4, #8]
 80041ea:	bf0c      	ite	eq
 80041ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f0:	2500      	movne	r5, #0
 80041f2:	4293      	cmp	r3, r2
 80041f4:	bfc4      	itt	gt
 80041f6:	1a9b      	subgt	r3, r3, r2
 80041f8:	18ed      	addgt	r5, r5, r3
 80041fa:	2600      	movs	r6, #0
 80041fc:	341a      	adds	r4, #26
 80041fe:	42b5      	cmp	r5, r6
 8004200:	d11a      	bne.n	8004238 <_printf_common+0xc8>
 8004202:	2000      	movs	r0, #0
 8004204:	e008      	b.n	8004218 <_printf_common+0xa8>
 8004206:	2301      	movs	r3, #1
 8004208:	4652      	mov	r2, sl
 800420a:	4649      	mov	r1, r9
 800420c:	4638      	mov	r0, r7
 800420e:	47c0      	blx	r8
 8004210:	3001      	adds	r0, #1
 8004212:	d103      	bne.n	800421c <_printf_common+0xac>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421c:	3501      	adds	r5, #1
 800421e:	e7c6      	b.n	80041ae <_printf_common+0x3e>
 8004220:	18e1      	adds	r1, r4, r3
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	2030      	movs	r0, #48	; 0x30
 8004226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800422a:	4422      	add	r2, r4
 800422c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004234:	3302      	adds	r3, #2
 8004236:	e7c7      	b.n	80041c8 <_printf_common+0x58>
 8004238:	2301      	movs	r3, #1
 800423a:	4622      	mov	r2, r4
 800423c:	4649      	mov	r1, r9
 800423e:	4638      	mov	r0, r7
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d0e6      	beq.n	8004214 <_printf_common+0xa4>
 8004246:	3601      	adds	r6, #1
 8004248:	e7d9      	b.n	80041fe <_printf_common+0x8e>
	...

0800424c <_printf_i>:
 800424c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004250:	7e0f      	ldrb	r7, [r1, #24]
 8004252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004254:	2f78      	cmp	r7, #120	; 0x78
 8004256:	4691      	mov	r9, r2
 8004258:	4680      	mov	r8, r0
 800425a:	460c      	mov	r4, r1
 800425c:	469a      	mov	sl, r3
 800425e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004262:	d807      	bhi.n	8004274 <_printf_i+0x28>
 8004264:	2f62      	cmp	r7, #98	; 0x62
 8004266:	d80a      	bhi.n	800427e <_printf_i+0x32>
 8004268:	2f00      	cmp	r7, #0
 800426a:	f000 80d4 	beq.w	8004416 <_printf_i+0x1ca>
 800426e:	2f58      	cmp	r7, #88	; 0x58
 8004270:	f000 80c0 	beq.w	80043f4 <_printf_i+0x1a8>
 8004274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800427c:	e03a      	b.n	80042f4 <_printf_i+0xa8>
 800427e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004282:	2b15      	cmp	r3, #21
 8004284:	d8f6      	bhi.n	8004274 <_printf_i+0x28>
 8004286:	a101      	add	r1, pc, #4	; (adr r1, 800428c <_printf_i+0x40>)
 8004288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800428c:	080042e5 	.word	0x080042e5
 8004290:	080042f9 	.word	0x080042f9
 8004294:	08004275 	.word	0x08004275
 8004298:	08004275 	.word	0x08004275
 800429c:	08004275 	.word	0x08004275
 80042a0:	08004275 	.word	0x08004275
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	08004275 	.word	0x08004275
 80042ac:	08004275 	.word	0x08004275
 80042b0:	08004275 	.word	0x08004275
 80042b4:	08004275 	.word	0x08004275
 80042b8:	080043fd 	.word	0x080043fd
 80042bc:	08004325 	.word	0x08004325
 80042c0:	080043b7 	.word	0x080043b7
 80042c4:	08004275 	.word	0x08004275
 80042c8:	08004275 	.word	0x08004275
 80042cc:	0800441f 	.word	0x0800441f
 80042d0:	08004275 	.word	0x08004275
 80042d4:	08004325 	.word	0x08004325
 80042d8:	08004275 	.word	0x08004275
 80042dc:	08004275 	.word	0x08004275
 80042e0:	080043bf 	.word	0x080043bf
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	602a      	str	r2, [r5, #0]
 80042ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f4:	2301      	movs	r3, #1
 80042f6:	e09f      	b.n	8004438 <_printf_i+0x1ec>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	0607      	lsls	r7, r0, #24
 80042fe:	f103 0104 	add.w	r1, r3, #4
 8004302:	6029      	str	r1, [r5, #0]
 8004304:	d501      	bpl.n	800430a <_printf_i+0xbe>
 8004306:	681e      	ldr	r6, [r3, #0]
 8004308:	e003      	b.n	8004312 <_printf_i+0xc6>
 800430a:	0646      	lsls	r6, r0, #25
 800430c:	d5fb      	bpl.n	8004306 <_printf_i+0xba>
 800430e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004312:	2e00      	cmp	r6, #0
 8004314:	da03      	bge.n	800431e <_printf_i+0xd2>
 8004316:	232d      	movs	r3, #45	; 0x2d
 8004318:	4276      	negs	r6, r6
 800431a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431e:	485a      	ldr	r0, [pc, #360]	; (8004488 <_printf_i+0x23c>)
 8004320:	230a      	movs	r3, #10
 8004322:	e012      	b.n	800434a <_printf_i+0xfe>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	6820      	ldr	r0, [r4, #0]
 8004328:	1d19      	adds	r1, r3, #4
 800432a:	6029      	str	r1, [r5, #0]
 800432c:	0605      	lsls	r5, r0, #24
 800432e:	d501      	bpl.n	8004334 <_printf_i+0xe8>
 8004330:	681e      	ldr	r6, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0xee>
 8004334:	0641      	lsls	r1, r0, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0xe4>
 8004338:	881e      	ldrh	r6, [r3, #0]
 800433a:	4853      	ldr	r0, [pc, #332]	; (8004488 <_printf_i+0x23c>)
 800433c:	2f6f      	cmp	r7, #111	; 0x6f
 800433e:	bf0c      	ite	eq
 8004340:	2308      	moveq	r3, #8
 8004342:	230a      	movne	r3, #10
 8004344:	2100      	movs	r1, #0
 8004346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800434a:	6865      	ldr	r5, [r4, #4]
 800434c:	60a5      	str	r5, [r4, #8]
 800434e:	2d00      	cmp	r5, #0
 8004350:	bfa2      	ittt	ge
 8004352:	6821      	ldrge	r1, [r4, #0]
 8004354:	f021 0104 	bicge.w	r1, r1, #4
 8004358:	6021      	strge	r1, [r4, #0]
 800435a:	b90e      	cbnz	r6, 8004360 <_printf_i+0x114>
 800435c:	2d00      	cmp	r5, #0
 800435e:	d04b      	beq.n	80043f8 <_printf_i+0x1ac>
 8004360:	4615      	mov	r5, r2
 8004362:	fbb6 f1f3 	udiv	r1, r6, r3
 8004366:	fb03 6711 	mls	r7, r3, r1, r6
 800436a:	5dc7      	ldrb	r7, [r0, r7]
 800436c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004370:	4637      	mov	r7, r6
 8004372:	42bb      	cmp	r3, r7
 8004374:	460e      	mov	r6, r1
 8004376:	d9f4      	bls.n	8004362 <_printf_i+0x116>
 8004378:	2b08      	cmp	r3, #8
 800437a:	d10b      	bne.n	8004394 <_printf_i+0x148>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07de      	lsls	r6, r3, #31
 8004380:	d508      	bpl.n	8004394 <_printf_i+0x148>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	6861      	ldr	r1, [r4, #4]
 8004386:	4299      	cmp	r1, r3
 8004388:	bfde      	ittt	le
 800438a:	2330      	movle	r3, #48	; 0x30
 800438c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004390:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004394:	1b52      	subs	r2, r2, r5
 8004396:	6122      	str	r2, [r4, #16]
 8004398:	f8cd a000 	str.w	sl, [sp]
 800439c:	464b      	mov	r3, r9
 800439e:	aa03      	add	r2, sp, #12
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f7ff fee4 	bl	8004170 <_printf_common>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d14a      	bne.n	8004442 <_printf_i+0x1f6>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	b004      	add	sp, #16
 80043b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	4833      	ldr	r0, [pc, #204]	; (800448c <_printf_i+0x240>)
 80043c0:	2778      	movs	r7, #120	; 0x78
 80043c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	6829      	ldr	r1, [r5, #0]
 80043ca:	061f      	lsls	r7, r3, #24
 80043cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80043d0:	d402      	bmi.n	80043d8 <_printf_i+0x18c>
 80043d2:	065f      	lsls	r7, r3, #25
 80043d4:	bf48      	it	mi
 80043d6:	b2b6      	uxthmi	r6, r6
 80043d8:	07df      	lsls	r7, r3, #31
 80043da:	bf48      	it	mi
 80043dc:	f043 0320 	orrmi.w	r3, r3, #32
 80043e0:	6029      	str	r1, [r5, #0]
 80043e2:	bf48      	it	mi
 80043e4:	6023      	strmi	r3, [r4, #0]
 80043e6:	b91e      	cbnz	r6, 80043f0 <_printf_i+0x1a4>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f023 0320 	bic.w	r3, r3, #32
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	2310      	movs	r3, #16
 80043f2:	e7a7      	b.n	8004344 <_printf_i+0xf8>
 80043f4:	4824      	ldr	r0, [pc, #144]	; (8004488 <_printf_i+0x23c>)
 80043f6:	e7e4      	b.n	80043c2 <_printf_i+0x176>
 80043f8:	4615      	mov	r5, r2
 80043fa:	e7bd      	b.n	8004378 <_printf_i+0x12c>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	6826      	ldr	r6, [r4, #0]
 8004400:	6961      	ldr	r1, [r4, #20]
 8004402:	1d18      	adds	r0, r3, #4
 8004404:	6028      	str	r0, [r5, #0]
 8004406:	0635      	lsls	r5, r6, #24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	d501      	bpl.n	8004410 <_printf_i+0x1c4>
 800440c:	6019      	str	r1, [r3, #0]
 800440e:	e002      	b.n	8004416 <_printf_i+0x1ca>
 8004410:	0670      	lsls	r0, r6, #25
 8004412:	d5fb      	bpl.n	800440c <_printf_i+0x1c0>
 8004414:	8019      	strh	r1, [r3, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	4615      	mov	r5, r2
 800441c:	e7bc      	b.n	8004398 <_printf_i+0x14c>
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	602a      	str	r2, [r5, #0]
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	4628      	mov	r0, r5
 800442c:	f7fb fed8 	bl	80001e0 <memchr>
 8004430:	b108      	cbz	r0, 8004436 <_printf_i+0x1ea>
 8004432:	1b40      	subs	r0, r0, r5
 8004434:	6060      	str	r0, [r4, #4]
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	2300      	movs	r3, #0
 800443c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004440:	e7aa      	b.n	8004398 <_printf_i+0x14c>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	462a      	mov	r2, r5
 8004446:	4649      	mov	r1, r9
 8004448:	4640      	mov	r0, r8
 800444a:	47d0      	blx	sl
 800444c:	3001      	adds	r0, #1
 800444e:	d0ad      	beq.n	80043ac <_printf_i+0x160>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	079b      	lsls	r3, r3, #30
 8004454:	d413      	bmi.n	800447e <_printf_i+0x232>
 8004456:	68e0      	ldr	r0, [r4, #12]
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	4298      	cmp	r0, r3
 800445c:	bfb8      	it	lt
 800445e:	4618      	movlt	r0, r3
 8004460:	e7a6      	b.n	80043b0 <_printf_i+0x164>
 8004462:	2301      	movs	r3, #1
 8004464:	4632      	mov	r2, r6
 8004466:	4649      	mov	r1, r9
 8004468:	4640      	mov	r0, r8
 800446a:	47d0      	blx	sl
 800446c:	3001      	adds	r0, #1
 800446e:	d09d      	beq.n	80043ac <_printf_i+0x160>
 8004470:	3501      	adds	r5, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	9903      	ldr	r1, [sp, #12]
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	42ab      	cmp	r3, r5
 800447a:	dcf2      	bgt.n	8004462 <_printf_i+0x216>
 800447c:	e7eb      	b.n	8004456 <_printf_i+0x20a>
 800447e:	2500      	movs	r5, #0
 8004480:	f104 0619 	add.w	r6, r4, #25
 8004484:	e7f5      	b.n	8004472 <_printf_i+0x226>
 8004486:	bf00      	nop
 8004488:	080048ad 	.word	0x080048ad
 800448c:	080048be 	.word	0x080048be

08004490 <__sflush_r>:
 8004490:	898a      	ldrh	r2, [r1, #12]
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	4605      	mov	r5, r0
 8004498:	0710      	lsls	r0, r2, #28
 800449a:	460c      	mov	r4, r1
 800449c:	d458      	bmi.n	8004550 <__sflush_r+0xc0>
 800449e:	684b      	ldr	r3, [r1, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dc05      	bgt.n	80044b0 <__sflush_r+0x20>
 80044a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dc02      	bgt.n	80044b0 <__sflush_r+0x20>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	d0f9      	beq.n	80044aa <__sflush_r+0x1a>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044bc:	682f      	ldr	r7, [r5, #0]
 80044be:	6a21      	ldr	r1, [r4, #32]
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	d032      	beq.n	800452a <__sflush_r+0x9a>
 80044c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	075a      	lsls	r2, r3, #29
 80044ca:	d505      	bpl.n	80044d8 <__sflush_r+0x48>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	1ac0      	subs	r0, r0, r3
 80044d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044d2:	b10b      	cbz	r3, 80044d8 <__sflush_r+0x48>
 80044d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d6:	1ac0      	subs	r0, r0, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	4602      	mov	r2, r0
 80044dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b0      	blx	r6
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	d106      	bne.n	80044f8 <__sflush_r+0x68>
 80044ea:	6829      	ldr	r1, [r5, #0]
 80044ec:	291d      	cmp	r1, #29
 80044ee:	d82b      	bhi.n	8004548 <__sflush_r+0xb8>
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <__sflush_r+0x108>)
 80044f2:	410a      	asrs	r2, r1
 80044f4:	07d6      	lsls	r6, r2, #31
 80044f6:	d427      	bmi.n	8004548 <__sflush_r+0xb8>
 80044f8:	2200      	movs	r2, #0
 80044fa:	6062      	str	r2, [r4, #4]
 80044fc:	04d9      	lsls	r1, r3, #19
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	d504      	bpl.n	800450e <__sflush_r+0x7e>
 8004504:	1c42      	adds	r2, r0, #1
 8004506:	d101      	bne.n	800450c <__sflush_r+0x7c>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b903      	cbnz	r3, 800450e <__sflush_r+0x7e>
 800450c:	6560      	str	r0, [r4, #84]	; 0x54
 800450e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004510:	602f      	str	r7, [r5, #0]
 8004512:	2900      	cmp	r1, #0
 8004514:	d0c9      	beq.n	80044aa <__sflush_r+0x1a>
 8004516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800451a:	4299      	cmp	r1, r3
 800451c:	d002      	beq.n	8004524 <__sflush_r+0x94>
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff fbea 	bl	8003cf8 <_free_r>
 8004524:	2000      	movs	r0, #0
 8004526:	6360      	str	r0, [r4, #52]	; 0x34
 8004528:	e7c0      	b.n	80044ac <__sflush_r+0x1c>
 800452a:	2301      	movs	r3, #1
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	1c41      	adds	r1, r0, #1
 8004532:	d1c8      	bne.n	80044c6 <__sflush_r+0x36>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0c5      	beq.n	80044c6 <__sflush_r+0x36>
 800453a:	2b1d      	cmp	r3, #29
 800453c:	d001      	beq.n	8004542 <__sflush_r+0xb2>
 800453e:	2b16      	cmp	r3, #22
 8004540:	d101      	bne.n	8004546 <__sflush_r+0xb6>
 8004542:	602f      	str	r7, [r5, #0]
 8004544:	e7b1      	b.n	80044aa <__sflush_r+0x1a>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	e7ad      	b.n	80044ac <__sflush_r+0x1c>
 8004550:	690f      	ldr	r7, [r1, #16]
 8004552:	2f00      	cmp	r7, #0
 8004554:	d0a9      	beq.n	80044aa <__sflush_r+0x1a>
 8004556:	0793      	lsls	r3, r2, #30
 8004558:	680e      	ldr	r6, [r1, #0]
 800455a:	bf08      	it	eq
 800455c:	694b      	ldreq	r3, [r1, #20]
 800455e:	600f      	str	r7, [r1, #0]
 8004560:	bf18      	it	ne
 8004562:	2300      	movne	r3, #0
 8004564:	eba6 0807 	sub.w	r8, r6, r7
 8004568:	608b      	str	r3, [r1, #8]
 800456a:	f1b8 0f00 	cmp.w	r8, #0
 800456e:	dd9c      	ble.n	80044aa <__sflush_r+0x1a>
 8004570:	6a21      	ldr	r1, [r4, #32]
 8004572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004574:	4643      	mov	r3, r8
 8004576:	463a      	mov	r2, r7
 8004578:	4628      	mov	r0, r5
 800457a:	47b0      	blx	r6
 800457c:	2800      	cmp	r0, #0
 800457e:	dc06      	bgt.n	800458e <__sflush_r+0xfe>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e78e      	b.n	80044ac <__sflush_r+0x1c>
 800458e:	4407      	add	r7, r0
 8004590:	eba8 0800 	sub.w	r8, r8, r0
 8004594:	e7e9      	b.n	800456a <__sflush_r+0xda>
 8004596:	bf00      	nop
 8004598:	dfbffffe 	.word	0xdfbffffe

0800459c <_fflush_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	690b      	ldr	r3, [r1, #16]
 80045a0:	4605      	mov	r5, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	b913      	cbnz	r3, 80045ac <_fflush_r+0x10>
 80045a6:	2500      	movs	r5, #0
 80045a8:	4628      	mov	r0, r5
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	b118      	cbz	r0, 80045b6 <_fflush_r+0x1a>
 80045ae:	6a03      	ldr	r3, [r0, #32]
 80045b0:	b90b      	cbnz	r3, 80045b6 <_fflush_r+0x1a>
 80045b2:	f7ff fa99 	bl	8003ae8 <__sinit>
 80045b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f3      	beq.n	80045a6 <_fflush_r+0xa>
 80045be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045c0:	07d0      	lsls	r0, r2, #31
 80045c2:	d404      	bmi.n	80045ce <_fflush_r+0x32>
 80045c4:	0599      	lsls	r1, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_fflush_r+0x32>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f7ff fb92 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 80045ce:	4628      	mov	r0, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	f7ff ff5d 	bl	8004490 <__sflush_r>
 80045d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045d8:	07da      	lsls	r2, r3, #31
 80045da:	4605      	mov	r5, r0
 80045dc:	d4e4      	bmi.n	80045a8 <_fflush_r+0xc>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	059b      	lsls	r3, r3, #22
 80045e2:	d4e1      	bmi.n	80045a8 <_fflush_r+0xc>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f7ff fb85 	bl	8003cf4 <__retarget_lock_release_recursive>
 80045ea:	e7dd      	b.n	80045a8 <_fflush_r+0xc>

080045ec <__swbuf_r>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	460e      	mov	r6, r1
 80045f0:	4614      	mov	r4, r2
 80045f2:	4605      	mov	r5, r0
 80045f4:	b118      	cbz	r0, 80045fe <__swbuf_r+0x12>
 80045f6:	6a03      	ldr	r3, [r0, #32]
 80045f8:	b90b      	cbnz	r3, 80045fe <__swbuf_r+0x12>
 80045fa:	f7ff fa75 	bl	8003ae8 <__sinit>
 80045fe:	69a3      	ldr	r3, [r4, #24]
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	071a      	lsls	r2, r3, #28
 8004606:	d525      	bpl.n	8004654 <__swbuf_r+0x68>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	b31b      	cbz	r3, 8004654 <__swbuf_r+0x68>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	6922      	ldr	r2, [r4, #16]
 8004610:	1a98      	subs	r0, r3, r2
 8004612:	6963      	ldr	r3, [r4, #20]
 8004614:	b2f6      	uxtb	r6, r6
 8004616:	4283      	cmp	r3, r0
 8004618:	4637      	mov	r7, r6
 800461a:	dc04      	bgt.n	8004626 <__swbuf_r+0x3a>
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f7ff ffbc 	bl	800459c <_fflush_r>
 8004624:	b9e0      	cbnz	r0, 8004660 <__swbuf_r+0x74>
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	3b01      	subs	r3, #1
 800462a:	60a3      	str	r3, [r4, #8]
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	701e      	strb	r6, [r3, #0]
 8004634:	6962      	ldr	r2, [r4, #20]
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	429a      	cmp	r2, r3
 800463a:	d004      	beq.n	8004646 <__swbuf_r+0x5a>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	07db      	lsls	r3, r3, #31
 8004640:	d506      	bpl.n	8004650 <__swbuf_r+0x64>
 8004642:	2e0a      	cmp	r6, #10
 8004644:	d104      	bne.n	8004650 <__swbuf_r+0x64>
 8004646:	4621      	mov	r1, r4
 8004648:	4628      	mov	r0, r5
 800464a:	f7ff ffa7 	bl	800459c <_fflush_r>
 800464e:	b938      	cbnz	r0, 8004660 <__swbuf_r+0x74>
 8004650:	4638      	mov	r0, r7
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	4621      	mov	r1, r4
 8004656:	4628      	mov	r0, r5
 8004658:	f000 f806 	bl	8004668 <__swsetup_r>
 800465c:	2800      	cmp	r0, #0
 800465e:	d0d5      	beq.n	800460c <__swbuf_r+0x20>
 8004660:	f04f 37ff 	mov.w	r7, #4294967295
 8004664:	e7f4      	b.n	8004650 <__swbuf_r+0x64>
	...

08004668 <__swsetup_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <__swsetup_r+0xac>)
 800466c:	4605      	mov	r5, r0
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	460c      	mov	r4, r1
 8004672:	b118      	cbz	r0, 800467c <__swsetup_r+0x14>
 8004674:	6a03      	ldr	r3, [r0, #32]
 8004676:	b90b      	cbnz	r3, 800467c <__swsetup_r+0x14>
 8004678:	f7ff fa36 	bl	8003ae8 <__sinit>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004682:	0718      	lsls	r0, r3, #28
 8004684:	d422      	bmi.n	80046cc <__swsetup_r+0x64>
 8004686:	06d9      	lsls	r1, r3, #27
 8004688:	d407      	bmi.n	800469a <__swsetup_r+0x32>
 800468a:	2309      	movs	r3, #9
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	e034      	b.n	8004704 <__swsetup_r+0x9c>
 800469a:	0758      	lsls	r0, r3, #29
 800469c:	d512      	bpl.n	80046c4 <__swsetup_r+0x5c>
 800469e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046a0:	b141      	cbz	r1, 80046b4 <__swsetup_r+0x4c>
 80046a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a6:	4299      	cmp	r1, r3
 80046a8:	d002      	beq.n	80046b0 <__swsetup_r+0x48>
 80046aa:	4628      	mov	r0, r5
 80046ac:	f7ff fb24 	bl	8003cf8 <_free_r>
 80046b0:	2300      	movs	r3, #0
 80046b2:	6363      	str	r3, [r4, #52]	; 0x34
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	2300      	movs	r3, #0
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	6023      	str	r3, [r4, #0]
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f043 0308 	orr.w	r3, r3, #8
 80046ca:	81a3      	strh	r3, [r4, #12]
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	b94b      	cbnz	r3, 80046e4 <__swsetup_r+0x7c>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d003      	beq.n	80046e4 <__swsetup_r+0x7c>
 80046dc:	4621      	mov	r1, r4
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f850 	bl	8004784 <__smakebuf_r>
 80046e4:	89a0      	ldrh	r0, [r4, #12]
 80046e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ea:	f010 0301 	ands.w	r3, r0, #1
 80046ee:	d00a      	beq.n	8004706 <__swsetup_r+0x9e>
 80046f0:	2300      	movs	r3, #0
 80046f2:	60a3      	str	r3, [r4, #8]
 80046f4:	6963      	ldr	r3, [r4, #20]
 80046f6:	425b      	negs	r3, r3
 80046f8:	61a3      	str	r3, [r4, #24]
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	b943      	cbnz	r3, 8004710 <__swsetup_r+0xa8>
 80046fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004702:	d1c4      	bne.n	800468e <__swsetup_r+0x26>
 8004704:	bd38      	pop	{r3, r4, r5, pc}
 8004706:	0781      	lsls	r1, r0, #30
 8004708:	bf58      	it	pl
 800470a:	6963      	ldrpl	r3, [r4, #20]
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	e7f4      	b.n	80046fa <__swsetup_r+0x92>
 8004710:	2000      	movs	r0, #0
 8004712:	e7f7      	b.n	8004704 <__swsetup_r+0x9c>
 8004714:	20000064 	.word	0x20000064

08004718 <_sbrk_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d06      	ldr	r5, [pc, #24]	; (8004734 <_sbrk_r+0x1c>)
 800471c:	2300      	movs	r3, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fc fc7c 	bl	8001020 <_sbrk>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_sbrk_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_sbrk_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	2000029c 	.word	0x2000029c

08004738 <__swhatbuf_r>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	460c      	mov	r4, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	2900      	cmp	r1, #0
 8004742:	b096      	sub	sp, #88	; 0x58
 8004744:	4615      	mov	r5, r2
 8004746:	461e      	mov	r6, r3
 8004748:	da0d      	bge.n	8004766 <__swhatbuf_r+0x2e>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	bf0c      	ite	eq
 8004756:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800475a:	2340      	movne	r3, #64	; 0x40
 800475c:	2000      	movs	r0, #0
 800475e:	6031      	str	r1, [r6, #0]
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	b016      	add	sp, #88	; 0x58
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	466a      	mov	r2, sp
 8004768:	f000 f848 	bl	80047fc <_fstat_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	dbec      	blt.n	800474a <__swhatbuf_r+0x12>
 8004770:	9901      	ldr	r1, [sp, #4]
 8004772:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004776:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800477a:	4259      	negs	r1, r3
 800477c:	4159      	adcs	r1, r3
 800477e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004782:	e7eb      	b.n	800475c <__swhatbuf_r+0x24>

08004784 <__smakebuf_r>:
 8004784:	898b      	ldrh	r3, [r1, #12]
 8004786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004788:	079d      	lsls	r5, r3, #30
 800478a:	4606      	mov	r6, r0
 800478c:	460c      	mov	r4, r1
 800478e:	d507      	bpl.n	80047a0 <__smakebuf_r+0x1c>
 8004790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	b002      	add	sp, #8
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	ab01      	add	r3, sp, #4
 80047a2:	466a      	mov	r2, sp
 80047a4:	f7ff ffc8 	bl	8004738 <__swhatbuf_r>
 80047a8:	9900      	ldr	r1, [sp, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7ff fb0f 	bl	8003dd0 <_malloc_r>
 80047b2:	b948      	cbnz	r0, 80047c8 <__smakebuf_r+0x44>
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	059a      	lsls	r2, r3, #22
 80047ba:	d4ef      	bmi.n	800479c <__smakebuf_r+0x18>
 80047bc:	f023 0303 	bic.w	r3, r3, #3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7e3      	b.n	8004790 <__smakebuf_r+0xc>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	6020      	str	r0, [r4, #0]
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	9b00      	ldr	r3, [sp, #0]
 80047d4:	6163      	str	r3, [r4, #20]
 80047d6:	9b01      	ldr	r3, [sp, #4]
 80047d8:	6120      	str	r0, [r4, #16]
 80047da:	b15b      	cbz	r3, 80047f4 <__smakebuf_r+0x70>
 80047dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e0:	4630      	mov	r0, r6
 80047e2:	f000 f81d 	bl	8004820 <_isatty_r>
 80047e6:	b128      	cbz	r0, 80047f4 <__smakebuf_r+0x70>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	431d      	orrs	r5, r3
 80047f8:	81a5      	strh	r5, [r4, #12]
 80047fa:	e7cf      	b.n	800479c <__smakebuf_r+0x18>

080047fc <_fstat_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d07      	ldr	r5, [pc, #28]	; (800481c <_fstat_r+0x20>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	f7fc fbe0 	bl	8000fce <_fstat>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d102      	bne.n	8004818 <_fstat_r+0x1c>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	b103      	cbz	r3, 8004818 <_fstat_r+0x1c>
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	2000029c 	.word	0x2000029c

08004820 <_isatty_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	; (800483c <_isatty_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc fbdf 	bl	8000fee <_isatty>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_isatty_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_isatty_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	2000029c 	.word	0x2000029c

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
